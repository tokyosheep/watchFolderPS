/*
   * Flattens a rule set into valid CSS
   * Hashes it, wraps the whole chunk in a .hash1234 {}
   * Returns the hash to be injected on render()
   * */

/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

/*
 ComponentStyle is all the CSS-specific stuff, not
 the React-specific stuff.
 */

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/*                                 */

/*                             */

/*                            */

/*                          */

/*                        */

/*                       */

/*                      */

/*                     */

/*                    */

/*                   */

/*                  */

/*                 */

/*                */

/*               */

/*             */

/*            */

/*           */

/*          */

/*         */

/*       */

/*      */

/*     */

/*    */

/*   */

/*  */

/* ! */

/* " */

/* # */

/* % */

/* & */

/* ' */

/* ( */

/* ) */

/* * */

/* */

/* + */

/* , */

/* - */

/* . */

/* / */

/* 0 */

/* 9 */

/* : */

/* ; */

/* < */

/* = */

/* > */

/* ? */

/* @ */

/* @import rules are reordered to appear first */

/* A */

/* Append to target when no previous element was passed */

/* Either execute or defer the function */

/* Firefox quirk requires us to step through all stylesheets to find one owned by the given tag */

/* Handle objects */

/* Handle other components */

/* If config methods are called, wrap up a new template function and merge options */

/* Insert new style tag after the previous one */

/* Modify/inject new props at runtime */

/* NOTE: This is just for backwards-compatibility with jest-styled-components */

/* Remove sealed StyleSheets from the master sheet */

/* The master sheet might be reset, so keep a reference here */

/* These are helpers for the StyleTags to keep track of the injected
 * rule names for each (component) ID that they're keeping track of.
 * They're crucial for detecting whether a name has already been
 * injected.
 * (This excludes rehydrated names) */

/* This is callable directly as a template function */

/* This is the "capacity" of our alphabet i.e. 2x26 for all letters plus their capitalised
 * counterparts */

/* Warning if there are several instances of styled-components */

/* We depend on components having unique IDs */

/* Work around insertRule quirk in EdgeHTML */

/* Z */

/* Z+1 */

/* [ */

/* \ */

/* \f */

/* \n */

/* \r */

/* \t */

/* \u00A0 */

/* \uFEFF */

/* ] */

/* ^ */

/* _ */

/* ` */

/* a */

/* a list of tags belonging to this StyleSheet */

/* a map from ids to tags */

/* a tag for import rules */

/* abort early if cssRule string is falsy */

/* abort rehydration if no previous style tags were found */

/* abort rehydration if nothing was extracted */

/* add all extracted components to the new tag */

/* add deferred rules for component */

/* add rehydrated name to sheet to avoid re-adding styles */

/* add to clone array */

/* add up no of injected rules */

/* adds "children" to the StyleSheet that inherit all of the parents' rules
   * while their own rules do not affect the parent */

/* adds a new ID:name pairing to a names dictionary */

/* any error indicates an invalid rule */

/* binding */

/* caching layer checking id+name to already have a corresponding tag and injected rules */

/* check if style tag is a streamed tag */

/* children (aka clones) of this StyleSheet inheriting all and future injections */

/* clone all tags */

/* clone other maps */

/* combines hashStr (murmurhash) and nameGenerator for convenience */

/* create a tag to be used for rehydration */

/* create new empty text node and replace the current one */

/* current capacity until a new tag must be created */

/* deferred rules for a given id */

/* delete possible deferred rules */

/* don't inject when the id is already registered */

/* encoding */

/* eslint-disable */

/* eslint-disable camelcase, no-undef */

/* eslint-disable guard-for-in */

/* eslint-disable import/no-unresolved */

/* eslint-disable max-len */

/* eslint-disable no-bitwise */

/* eslint-disable no-empty */

/* eslint-disable no-new */

/* eslint-disable no-unused-expressions */

/* eslint-disable no-unused-vars */

/* eslint-disable no-unused-vars, prefer-destructuring */

/* eslint-disable no-var */

/* eslint-disable react-internal/no-production-logging */

/* eslint-disable react/prop-types, flowtype-errors/show-errors */

/* eslint-disable-next-line no-new */

/* eslint-enable */

/* eslint-enable no-console */

/* eslint-enable no-empty */

/* eslint-enable no-unused-vars */

/* eslint-enable no-unused-vars, prefer-destructuring */

/* exception for rehydrated names which are checked separately */

/* extract all components and their CSS */

/* fail silently */

/* falls through */

/* force StyleSheet to create a new tag on the next injection */

/* force our StyleSheets to emit entirely new tags */

/* get a char and divide by alphabet-length */

/* get a tag for a given componentId, assign the componentId to one, or shard */

/* global Symbol */

/* globals MSApp */

/* harmony default export */

/* harmony export */

/* harmony import */

/* ignore possible rehydrated names */

/* in speedy mode we can keep a lot more rules in a sheet before a slowdown can be expected */

/* injects rules for a given id with a name that will need to be cached */

/* input a number, usually a hash and convert it to base-52 */

/* mainly for createGlobalStyle to check for its id */

/* module decorator */

/* n */

/* o */

/* prepend style html to chunk, unless the start of the chunk is a closing tag in which case append right after that */

/* reconstruct tagMap */

/* reexport safe */

/* registers a componentId and registers it on its tag */

/* rehydrate all SSR'd style tags */

/* remove all rules from the tag */

/* remove old HTMLStyleElements, since they have been rehydrated */

/* removes all rules for a given id, which doesn't remove its marker but resets it */

/* reset capacity and adjust MAX_SIZE by the initial size of the rehydration */

/* reset the internal "master" instance */

/* retrieve a "master" instance of StyleSheet which is typically used when no other is available
   * The master StyleSheet is targeted by createGlobalStyle, keyframes, and components outside of any
    * StyleSheetManager's context */

/* retrieve all component ids */

/* retrieve all component names */

/* retrieve html for each new style tag */

/* shard (create a new tag) if the tag is exhausted (See MAX_SIZE) */

/* simply return a tag, when the componentId was already assigned one */

/* start at 75 for 'a' until 'z' (25) and then start at 65 for capitalised letters */

/* store original HTMLStyleElement */

/* the tag index keeps track of which tags have already been emitted */

/* this is used for not reinjecting rules via hasNameForId() */

/* use insertRule and cap passed index with maxIndex (no of cssRules) */

/* we should always be able to find a tag */

/* webpack/runtime/compat get default export */

/* when rules for an id are removed using remove() we have to ignore rehydratedNames for it */

/* z */

/* { */

/* | */

/* } */

/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */

/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */

/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */

/*!
 * normalize-path <https://github.com/jonschlinkert/normalize-path>
 *
 * Copyright (c) 2014-2018, Jon Schlinkert.
 * Released under the MIT License.
 */

/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/*! ../../../redux/actions/optionsDiapatch */

/*! ../../../styles/containers */

/*! ../../../styles/title */

/*! ../../fileSystem/init */

/*! ../../fileSystem/watchSystem */

/*! ../../parts/checkBox */

/*! ../../redux/actions/actionDispatch */

/*! ../../redux/actions/optionsDiapatch */

/*! ../../redux/actions/watchDispatch */

/*! ../../styles/commonStyle */

/*! ../../styles/containers */

/*! ../../styles/title */

/*! ../checkExt */

/*! ../components/Context */

/*! ../components/actions/actionSelect */

/*! ../components/asideBar/save/saveExts */

/*! ../components/asideBar/target/target */

/*! ../components/connectAdvanced */

/*! ../components/export/exportCompo */

/*! ../components/footer/footer */

/*! ../components/header/header */

/*! ../components/loading/loading */

/*! ../components/main/watchMain */

/*! ../export/folderCompo */

/*! ../fileSystem/getActions */

/*! ../fileSystem/init */

/*! ../lib */

/*! ../listStyle */

/*! ../parts/button */

/*! ../parts/checkBox */

/*! ../reducer/ext */

/*! ../reducer/options */

/*! ../reducer/watch */

/*! ../redux/actions/actionDispatch */

/*! ../styles/containers */

/*! ../utils/Subscription */

/*! ../utils/shallowEqual */

/*! ../utils/useIsomorphicLayoutEffect */

/*! ../utils/verifyPlainObject */

/*! ../utils/warning */

/*! ./Context */

/*! ./arrayLikeToArray */

/*! ./arrayWithHoles */

/*! ./arrayWithoutHoles */

/*! ./batch */

/*! ./binary-extensions.json */

/*! ./checkPropTypes */

/*! ./cjs/react-dom.development.js */

/*! ./cjs/react-is.development.js */

/*! ./cjs/react.development.js */

/*! ./cjs/scheduler-tracing.development.js */

/*! ./cjs/scheduler.development.js */

/*! ./components/Context */

/*! ./components/Provider */

/*! ./components/connectAdvanced */

/*! ./connect/connect */

/*! ./connectHostScript */

/*! ./constants */

/*! ./factoryWithTypeCheckers */

/*! ./folderCompo */

/*! ./hooks/useDispatch */

/*! ./hooks/useSelector */

/*! ./hooks/useStore */

/*! ./iconBase */

/*! ./iconContext */

/*! ./iconsManifest */

/*! ./init */

/*! ./isPlainObject */

/*! ./iterableToArray */

/*! ./iterableToArrayLimit */

/*! ./lib/ReactPropTypesSecret */

/*! ./lib/compile */

/*! ./lib/constants */

/*! ./lib/expand */

/*! ./lib/fsevents-handler */

/*! ./lib/nodefs-handler */

/*! ./lib/parse */

/*! ./lib/picomatch */

/*! ./lib/stringify */

/*! ./mapDispatchToProps */

/*! ./mapStateToProps */

/*! ./mergeProps */

/*! ./nonIterableRest */

/*! ./nonIterableSpread */

/*! ./pages/layout */

/*! ./parse */

/*! ./ponyfill.js */

/*! ./redux/store/store */

/*! ./scan */

/*! ./selector */

/*! ./selectorFactory */

/*! ./stringify */

/*! ./unsupportedIterableToArray */

/*! ./useReduxContext */

/*! ./useStore */

/*! ./useWatch */

/*! ./utils */

/*! ./utils/batch */

/*! ./utils/reactBatchedUpdates */

/*! ./utils/shallowEqual */

/*! ./verifySubselectors */

/*! ./warning */

/*! ./wrapMapToProps */

/*! @babel/runtime/helpers/asyncToGenerator */

/*! @babel/runtime/helpers/classCallCheck */

/*! @babel/runtime/helpers/createClass */

/*! @babel/runtime/helpers/defineProperty */

/*! @babel/runtime/helpers/esm/extends */

/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */

/*! @babel/runtime/helpers/slicedToArray */

/*! @babel/runtime/helpers/taggedTemplateLiteral */

/*! @babel/runtime/helpers/toConsumableArray */

/*! @babel/runtime/regenerator */

/*! @emotion/is-prop-valid */

/*! @emotion/memoize */

/*! @emotion/unitless */

/*! anymatch */

/*! binary-extensions */

/*! braces */

/*! chokidar */

/*! events */

/*! fill-range */

/*! fs */

/*! fsevents */

/*! glob-parent */

/*! hoist-non-react-statics */

/*! is-binary-path */

/*! is-extglob */

/*! is-glob */

/*! is-number */

/*! is-what */

/*! lodash */

/*! memoize-one */

/*! merge-anything */

/*! normalize-path */

/*! object-assign */

/*! os */

/*! path */

/*! picomatch */

/*! prop-types */

/*! prop-types/checkPropTypes */

/*! react */

/*! react-dom */

/*! react-icons/io5 */

/*! react-is */

/*! react-redux */

/*! readdirp */

/*! redux */

/*! regenerator-runtime */

/*! scheduler */

/*! scheduler/tracing */

/*! stream */

/*! styled-components */

/*! stylis-rule-sheet */

/*! stylis/stylis.min */

/*! symbol-observable */

/*! to-regex-range */

/*! url */

/*! util */

/*!******************!*\
  !*** ./main.tsx ***!
  \******************/

/*!*********************!*\
  !*** external "fs" ***!
  \*********************/

/*!*********************!*\
  !*** external "os" ***!
  \*********************/

/*!**********************!*\
  !*** external "url" ***!
  \**********************/

/*!***********************!*\
  !*** external "path" ***!
  \***********************/

/*!***********************!*\
  !*** external "util" ***!
  \***********************/

/*!*************************!*\
  !*** ./styles/title.ts ***!
  \*************************/

/*!*************************!*\
  !*** external "events" ***!
  \*************************/

/*!*************************!*\
  !*** external "stream" ***!
  \*************************/

/*!**************************!*\
  !*** ./pages/layout.tsx ***!
  \**************************/

/*!****************************!*\
  !*** ./fileSystem/init.js ***!
  \****************************/

/*!******************************!*\
  !*** ./redux/reducer/ext.ts ***!
  \******************************/

/*!******************************!*\
  !*** ./redux/store/store.ts ***!
  \******************************/

/*!******************************!*\
  !*** ./styles/containers.ts ***!
  \******************************/

/*!*******************************!*\
  !*** ./styles/commonStyle.ts ***!
  \*******************************/

/*!********************************!*\
  !*** ./redux/reducer/watch.ts ***!
  \********************************/

/*!**********************************!*\
  !*** ./fileSystem/getActions.ts ***!
  \**********************************/

/*!**********************************!*\
  !*** ./redux/reducer/options.ts ***!
  \**********************************/

/*!***********************************!*\
  !*** ./fileSystem/watchSystem.ts ***!
  \***********************************/

/*!*************************************!*\
  !*** ./components/parts/button.tsx ***!
  \*************************************/

/*!**************************************!*\
  !*** ./components/footer/footer.tsx ***!
  \**************************************/

/*!**************************************!*\
  !*** ./components/header/header.tsx ***!
  \**************************************/

/*!**************************************!*\
  !*** external "require('fsevents')" ***!
  \**************************************/

/*!***************************************!*\
  !*** ../node_modules/braces/index.js ***!
  \***************************************/

/*!***************************************!*\
  !*** ./components/main/watchMain.tsx ***!
  \***************************************/

/*!***************************************!*\
  !*** ./components/parts/checkBox.tsx ***!
  \***************************************/

/*!****************************************!*\
  !*** ../node_modules/is-glob/index.js ***!
  \****************************************/

/*!****************************************!*\
  !*** ../node_modules/lodash/lodash.js ***!
  \****************************************/

/*!****************************************!*\
  !*** ./components/footer/useWatch.tsx ***!
  \****************************************/

/*!****************************************!*\
  !*** ./components/loading/loading.tsx ***!
  \****************************************/

/*!****************************************!*\
  !*** ./redux/actions/watchDispatch.ts ***!
  \****************************************/

/*!*****************************************!*\
  !*** ../node_modules/anymatch/index.js ***!
  \*****************************************/

/*!*****************************************!*\
  !*** ../node_modules/chokidar/index.js ***!
  \*****************************************/

/*!*****************************************!*\
  !*** ../node_modules/react-is/index.js ***!
  \*****************************************/

/*!*****************************************!*\
  !*** ../node_modules/readdirp/index.js ***!
  \*****************************************/

/*!*****************************************!*\
  !*** ../node_modules/redux/es/redux.js ***!
  \*****************************************/

/*!*****************************************!*\
  !*** ./components/actions/selector.tsx ***!
  \*****************************************/

/*!*****************************************!*\
  !*** ./fileSystem/connectHostScript.ts ***!
  \*****************************************/

/*!*****************************************!*\
  !*** ./redux/actions/actionDispatch.ts ***!
  \*****************************************/

/*!******************************************!*\
  !*** ../node_modules/is-number/index.js ***!
  \******************************************/

/*!******************************************!*\
  !*** ../node_modules/picomatch/index.js ***!
  \******************************************/

/*!******************************************!*\
  !*** ../node_modules/react-dom/index.js ***!
  \******************************************/

/*!******************************************!*\
  !*** ../node_modules/scheduler/index.js ***!
  \******************************************/

/*!******************************************!*\
  !*** ./components/asideBar/checkExt.tsx ***!
  \******************************************/

/*!******************************************!*\
  !*** ./components/asideBar/listStyle.ts ***!
  \******************************************/

/*!******************************************!*\
  !*** ./redux/actions/optionsDiapatch.ts ***!
  \******************************************/

/*!*******************************************!*\
  !*** ../node_modules/braces/lib/parse.js ***!
  \*******************************************/

/*!*******************************************!*\
  !*** ../node_modules/braces/lib/utils.js ***!
  \*******************************************/

/*!*******************************************!*\
  !*** ../node_modules/fill-range/index.js ***!
  \*******************************************/

/*!*******************************************!*\
  !*** ../node_modules/is-extglob/index.js ***!
  \*******************************************/

/*!*******************************************!*\
  !*** ../node_modules/prop-types/index.js ***!
  \*******************************************/

/*!*******************************************!*\
  !*** ./components/export/exportCompo.tsx ***!
  \*******************************************/

/*!*******************************************!*\
  !*** ./components/export/folderCompo.tsx ***!
  \*******************************************/

/*!********************************************!*\
  !*** ../node_modules/braces/lib/expand.js ***!
  \********************************************/

/*!********************************************!*\
  !*** ../node_modules/glob-parent/index.js ***!
  \********************************************/

/*!********************************************!*\
  !*** ../node_modules/scheduler/tracing.js ***!
  \********************************************/

/*!********************************************!*\
  !*** ../node_modules/stylis/stylis.min.js ***!
  \********************************************/

/*!*********************************************!*\
  !*** ../node_modules/braces/lib/compile.js ***!
  \*********************************************/

/*!*********************************************!*\
  !*** ../node_modules/picomatch/lib/scan.js ***!
  \*********************************************/

/*!*********************************************!*\
  !*** ./components/actions/actionSelect.tsx ***!
  \*********************************************/

/*!**********************************************!*\
  !*** ../node_modules/object-assign/index.js ***!
  \**********************************************/

/*!**********************************************!*\
  !*** ../node_modules/picomatch/lib/parse.js ***!
  \**********************************************/

/*!**********************************************!*\
  !*** ../node_modules/picomatch/lib/utils.js ***!
  \**********************************************/

/*!***********************************************!*\
  !*** ../node_modules/braces/lib/constants.js ***!
  \***********************************************/

/*!***********************************************!*\
  !*** ../node_modules/braces/lib/stringify.js ***!
  \***********************************************/

/*!***********************************************!*\
  !*** ../node_modules/is-binary-path/index.js ***!
  \***********************************************/

/*!***********************************************!*\
  !*** ../node_modules/normalize-path/index.js ***!
  \***********************************************/

/*!***********************************************!*\
  !*** ../node_modules/react-redux/es/index.js ***!
  \***********************************************/

/*!***********************************************!*\
  !*** ../node_modules/to-regex-range/index.js ***!
  \***********************************************/

/*!***********************************************!*\
  !*** ./components/asideBar/save/saveExts.tsx ***!
  \***********************************************/

/*!***********************************************!*\
  !*** ./components/asideBar/target/target.tsx ***!
  \***********************************************/

/*!*************************************************!*\
  !*** ../node_modules/chokidar/lib/constants.js ***!
  \*************************************************/

/*!*************************************************!*\
  !*** ../node_modules/is-what/dist/index.esm.js ***!
  \*************************************************/

/*!**************************************************!*\
  !*** ../node_modules/binary-extensions/index.js ***!
  \**************************************************/

/*!**************************************************!*\
  !*** ../node_modules/picomatch/lib/constants.js ***!
  \**************************************************/

/*!**************************************************!*\
  !*** ../node_modules/picomatch/lib/picomatch.js ***!
  \**************************************************/

/*!**************************************************!*\
  !*** ../node_modules/stylis-rule-sheet/index.js ***!
  \**************************************************/

/*!****************************************************!*\
  !*** ../node_modules/prop-types/checkPropTypes.js ***!
  \****************************************************/

/*!****************************************************!*\
  !*** ../node_modules/react-icons/io5/index.esm.js ***!
  \****************************************************/

/*!****************************************************!*\
  !*** ../node_modules/react-icons/lib/esm/index.js ***!
  \****************************************************/

/*!*****************************************************!*\
  !*** ../node_modules/react-redux/es/utils/batch.js ***!
  \*****************************************************/

/*!*****************************************************!*\
  !*** ../node_modules/symbol-observable/es/index.js ***!
  \*****************************************************/

/*!******************************************************!*\
  !*** ../node_modules/chokidar/lib/nodefs-handler.js ***!
  \******************************************************/

/*!******************************************************!*\
  !*** ../node_modules/regenerator-runtime/runtime.js ***!
  \******************************************************/

/*!*******************************************************!*\
  !*** ../node_modules/react-icons/lib/esm/iconBase.js ***!
  \*******************************************************/

/*!*******************************************************!*\
  !*** ../node_modules/react-redux/es/utils/warning.js ***!
  \*******************************************************/

/*!********************************************************!*\
  !*** ../../../../../../../node_modules/react/index.js ***!
  \********************************************************/

/*!********************************************************!*\
  !*** ../node_modules/chokidar/lib/fsevents-handler.js ***!
  \********************************************************/

/*!********************************************************!*\
  !*** ../node_modules/merge-anything/dist/index.esm.js ***!
  \********************************************************/

/*!********************************************************!*\
  !*** ../node_modules/react-redux/es/hooks/useStore.js ***!
  \********************************************************/

/*!********************************************************!*\
  !*** ../node_modules/symbol-observable/es/ponyfill.js ***!
  \********************************************************/

/*!*********************************************************!*\
  !*** ../node_modules/react-redux/es/connect/connect.js ***!
  \*********************************************************/

/*!**********************************************************!*\
  !*** ../node_modules/react-icons/lib/esm/iconContext.js ***!
  \**********************************************************/

/*!***********************************************************!*\
  !*** ../node_modules/@babel/runtime/regenerator/index.js ***!
  \***********************************************************/

/*!***********************************************************!*\
  !*** ../node_modules/memoize-one/dist/memoize-one.esm.js ***!
  \***********************************************************/

/*!***********************************************************!*\
  !*** ../node_modules/react-redux/es/hooks/useDispatch.js ***!
  \***********************************************************/

/*!***********************************************************!*\
  !*** ../node_modules/react-redux/es/hooks/useSelector.js ***!
  \***********************************************************/

/*!************************************************************!*\
  !*** ../node_modules/@emotion/memoize/dist/memoize.esm.js ***!
  \************************************************************/

/*!************************************************************!*\
  !*** ../node_modules/react-icons/lib/esm/iconsManifest.js ***!
  \************************************************************/

/*!************************************************************!*\
  !*** ../node_modules/react-is/cjs/react-is.development.js ***!
  \************************************************************/

/*!************************************************************!*\
  !*** ../node_modules/react-redux/es/components/Context.js ***!
  \************************************************************/

/*!************************************************************!*\
  !*** ../node_modules/react-redux/es/connect/mergeProps.js ***!
  \************************************************************/

/*!************************************************************!*\
  !*** ../node_modules/react-redux/es/utils/Subscription.js ***!
  \************************************************************/

/*!************************************************************!*\
  !*** ../node_modules/react-redux/es/utils/shallowEqual.js ***!
  \************************************************************/

/*!*************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/createClass.js ***!
  \*************************************************************/

/*!*************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/esm/extends.js ***!
  \*************************************************************/

/*!*************************************************************!*\
  !*** ../node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \*************************************************************/

/*!*************************************************************!*\
  !*** ../node_modules/react-redux/es/components/Provider.js ***!
  \*************************************************************/

/*!*************************************************************!*\
  !*** ../node_modules/react-redux/es/utils/isPlainObject.js ***!
  \*************************************************************/

/*!**************************************************************!*\
  !*** ../node_modules/@emotion/unitless/dist/unitless.esm.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../node_modules/react-dom/cjs/react-dom.development.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../node_modules/scheduler/cjs/scheduler.development.js ***!
  \**************************************************************/

/*!***************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../node_modules/react-redux/es/hooks/useReduxContext.js ***!
  \***************************************************************/

/*!****************************************************************!*\
  !*** ../../../../../../../node_modules/object-assign/index.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../node_modules/binary-extensions/binary-extensions.json ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../node_modules/react-redux/es/connect/wrapMapToProps.js ***!
  \****************************************************************/

/*!*****************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../node_modules/react-redux/es/connect/mapStateToProps.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../node_modules/react-redux/es/connect/selectorFactory.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../node_modules/react-redux/es/utils/verifyPlainObject.js ***!
  \*****************************************************************/

/*!******************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \******************************************************************/

/*!*******************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../node_modules/react-redux/es/utils/reactBatchedUpdates.js ***!
  \*******************************************************************/

/*!********************************************************************!*\
  !*** ../node_modules/react-redux/es/components/connectAdvanced.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../node_modules/react-redux/es/connect/mapDispatchToProps.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../node_modules/react-redux/es/connect/verifySubselectors.js ***!
  \********************************************************************/

/*!**********************************************************************!*\
  !*** ../../../../../../../node_modules/prop-types/checkPropTypes.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../node_modules/scheduler/cjs/scheduler-tracing.development.js ***!
  \**********************************************************************/

/*!***********************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../node_modules/styled-components/dist/styled-components.esm.js ***!
  \***********************************************************************/

/*!************************************************************************!*\
  !*** ../../../../../../../node_modules/react/cjs/react.development.js ***!
  \************************************************************************/

/*!************************************************************************!*\
  !*** ../node_modules/@emotion/is-prop-valid/dist/is-prop-valid.esm.js ***!
  \************************************************************************/

/*!*************************************************************************!*\
  !*** ../node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js ***!
  \*************************************************************************/

/*!****************************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \****************************************************************************/

/*!********************************************************************************!*\
  !*** ../../../../../../../node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \********************************************************************************/

/*!**********************************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js ***!
  \**********************************************************************************/

/*!***********************************************************************************!*\
  !*** ../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js ***!
  \***********************************************************************************/

/*#__PURE__*/

/**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */

/**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */

/**
       * Depending on the order "render" is called this can cause the styles to be lost
       * until the next render pass of the remaining instance, which may
       * not be immediate.
       */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
       * This fixes HMR compatibility. Don't ask me why, but this combination of
       * caching the closure variables via statics and then persisting the statics in
       * state works across HMR where no other combination did. ¯\_(ツ)_/¯
       */

/**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */

/**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */

/**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */

/**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */

/**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */

/**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */

/**
     * @type {'add'|'addDir'|'unlink'|'unlinkDir'}
     */

/**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */

/**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */

/**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */

/**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */

/**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */

/**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */

/**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */

/**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */

/**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */

/**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */

/**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */

/**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */

/**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */

/**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */

/**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */

/**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */

/**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */

/**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */

/**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */

/**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */

/**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */

/**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */

/**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */

/**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */

/**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */

/**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */

/**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */

/**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */

/**
     * Braces
     */

/**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */

/**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */

/**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */

/**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */

/**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */

/**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */

/**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */

/**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */

/**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */

/**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */

/**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */

/**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */

/**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */

/**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */

/**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */

/**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */

/**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */

/**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */

/**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */

/**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */

/**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */

/**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */

/**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */

/**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */

/**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */

/**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */

/**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */

/**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */

/**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */

/**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */

/**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */

/**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */

/**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */

/**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */

/**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */

/**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */

/**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */

/**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */

/**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */

/**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */

/**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */

/**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */

/**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */

/**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */

/**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */

/**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */

/**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */

/**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */

/**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */

/**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */

/**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */

/**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */

/**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */

/**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */

/**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */

/**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */

/**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */

/**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */

/**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */

/**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */

/**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

/**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

/**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

/**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

/**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */

/**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */

/**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */

/**
     * Comma: ','
     */

/**
     * Commas
     */

/**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */

/**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */

/**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */

/**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */

/**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */

/**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */

/**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */

/**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */

/**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */

/**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */

/**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */

/**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */

/**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */

/**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */

/**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */

/**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */

/**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */

/**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */

/**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */

/**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */

/**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */

/**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */

/**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */

/**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */

/**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */

/**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */

/**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */

/**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */

/**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */

/**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */

/**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */

/**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */

/**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */

/**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */

/**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */

/**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */

/**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */

/**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */

/**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */

/**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */

/**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */

/**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */

/**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */

/**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */

/**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */

/**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */

/**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */

/**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */

/**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */

/**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */

/**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */

/**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */

/**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */

/**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */

/**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */

/**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */

/**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */

/**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */

/**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */

/**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */

/**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */

/**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */

/**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */

/**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */

/**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */

/**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */

/**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */

/**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */

/**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */

/**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */

/**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */

/**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */

/**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */

/**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */

/**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */

/**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */

/**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */

/**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */

/**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */

/**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */

/**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */

/**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */

/**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */

/**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */

/**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */

/**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */

/**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */

/**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */

/**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */

/**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */

/**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */

/**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */

/**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */

/**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */

/**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */

/**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */

/**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

/**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */

/**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

/**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */

/**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */

/**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */

/**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */

/**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */

/**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */

/**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */

/**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */

/**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */

/**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */

/**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */

/**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */

/**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

/**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */

/**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */

/**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */

/**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */

/**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */

/**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */

/**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */

/**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */

/**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */

/**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */

/**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */

/**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */

/**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */

/**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */

/**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */

/**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */

/**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */

/**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */

/**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */

/**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */

/**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */

/**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */

/**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */

/**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */

/**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */

/**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */

/**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */

/**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */

/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */

/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */

/**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */

/**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */

/**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */

/**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */

/**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */

/**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */

/**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */

/**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */

/**
     * Dot: '.'
     */

/**
     * Dots
     */

/**
     * Double quotes
     */

/**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */

/**
     * Escaped characters
     */

/**
     * Escaped chars
     */

/**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */

/**
     * Exclamation
     */

/**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */

/**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */

/**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */

/**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */

/**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */

/**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */

/**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */

/**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */

/**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */

/**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */

/**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */

/**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */

/**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */

/**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */

/**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */

/**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */

/**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */

/**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

/**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */

/**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */

/**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */

/**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

/**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

/**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */

/**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */

/**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */

/**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */

/**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */

/**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */

/**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

/**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */

/**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */

/**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */

/**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */

/**
     * If we're inside a quoted string, continue
     * until we reach the closing double quote.
     */

/**
     * If we're inside a regex character class, continue
     * until we reach the closing bracket.
     */

/**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */

/**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */

/**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */

/**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */

/**
     * Invalid chars
     */

/**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */

/**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */

/**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */

/**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */

/**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */

/**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */

/**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */

/**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */

/**
     * Left curly brace: '{'
     */

/**
     * Left square bracket: '['
     */

/**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */

/**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */

/**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */

/**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */

/**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */

/**
     * Parentheses
     */

/**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */

/**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */

/**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */

/**
     * Pipes
     */

/**
     * Plain text
     */

/**
     * Plus
     */

/**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */

/**
     * Question marks
     */

/**
     * Quotes: '|"|`
     */

/**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */

/**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */

/**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */

/**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

/**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

/**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

/**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

/**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */

/**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */

/**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */

/**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */

/**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */

/**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */

/**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */

/**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */

/**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */

/**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */

/**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */

/**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */

/**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */

/**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */

/**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */

/**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */

/**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */

/**
     * Right curly brace: '}'
     */

/**
     * Right square bracket (literal): ']'
     */

/**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */

/**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */

/**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */

/**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */

/**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */

/**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */

/**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */

/**
     * Slashes
     */

/**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */

/**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */

/**
     * Square brackets
     */

/**
     * Stars
     */

/**
     * Text
     */

/**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */

/**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */

/**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */

/**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */

/**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */

/**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */

/**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */

/**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */

/**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */

/**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */

/**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */

/**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */

/**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */

/**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */

/**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */

/**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */

/**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */

/**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */

/**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */

/**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */

/**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */

/**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */

/**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */

/**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */

/**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */

/**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */

/**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */

/**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */

/**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */

/**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */

/**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */

/**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */

/**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */

/**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */

/**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */

/**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */

/**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */

/**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */

/**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */

/**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */

/**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */

/**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */

/**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */

/**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */

/**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */

/**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */

/**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */

/**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */

/**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */

/**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */

/**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */

/**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */

/**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */

/**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */

/**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */

/**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */

/**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */

/**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */

/**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */

/**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */

/**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */

/**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */

/**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */

/**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */

/**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */

/**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */

/**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */

/**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */

/**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */

/**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */

/**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */

/**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */

/**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */

/**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */

/**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */

/**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */

/**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */

/**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */

/**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */

/**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */

/**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */

/**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */

/**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */

/**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */

/**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */

/**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */

/**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */

/**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */

/**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */

/**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */

/**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */

/**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */

/**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */

/**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */

/**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */

/**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */

/**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */

/**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */

/**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */

/**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */

/**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */

/**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */

/**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */

/**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */

/**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */

/**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */

/**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */

/**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */

/**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */

/**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */

/**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */

/**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */

/**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */

/**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */

/**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */

/**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */

/**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */

/**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */

/**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */

/**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */

/**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */

/**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */

/**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */

/**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */

/**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */

/**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */

/**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */

/**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */

/**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */

/**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */

/**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */

/**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */

/**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */

/**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */

/**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */

/**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */

/**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */

/**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */

/**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */

/**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */

/**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */

/**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */

/**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */

/**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */

/**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */

/**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */

/**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */

/**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */

/**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */

/**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */

/**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */

/**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */

/**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */

/**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */

/**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */

/**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */

/**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */

/**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */

/**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */

/**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */

/**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */

/**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */

/**
   * @internal
   * @type {ReactComponent}
   */

/**
   * @param {Path} dir
   * @param {Function} removeWatcher
   */

/**
   * @returns {Array<String>}
   */

/**
   * @type {Array<String>}
   */

/**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */

/**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */

/**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */

/**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */

/**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */

/**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */

/**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

/**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

/**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */

/**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */

/**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */

/**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */

/**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */

/**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */

/**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */

/**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

/**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */

/**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

/**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */

/**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */

/**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */

/**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */

/**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

/**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

/**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

/**
   * Create EXTGLOB_CHARS
   */

/**
   * Create GLOB_CHARS
   */

/**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */

/**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Fast paths
   */

/**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */

/**
   * Get the theme from the props, supporting both (outerTheme) => {}
   * as well as object notation
   */

/**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */

/**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */

/**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */

/**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */

/**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */

/**
   * Helpers
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Mark the ServerStyleSheet as being fully emitted and manually GC it from the
   * StyleSheet singleton.
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */

/**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */

/**
   * Returns whether
   */

/**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */

/**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */

/**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */

/**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */

/**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

/**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

/**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */

/**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */

/**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */

/**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */

/**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */

/**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */

/**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */

/**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */

/**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */

/**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */

/**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */

/**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */

/**
   * This ensures uniqueness if two components happen to share
   * the same displayName.
   */

/**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */

/**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * Tokenize input until we reach end-of-string
   */

/**
   * Tokenizing helpers
   */

/**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */

/**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

/**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

/**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */

/**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */

/**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */

/**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

/**
   * Warns if there is a duplicate or missing key
   */

/**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */

/**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */

/**
 *
 * @param {Path} newPath
 * @param {fs.Stats} stats
 */

/**
 *
 * @param {Path} path
 * @param {Function} closer
 */

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/**
 * @mixin
 */

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */

/**
 * @param {AnymatchPattern} matcher
 * @param {object} options
 * @returns {AnymatchFn}
 */

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * @param {import("../index").FSWatcher} fsW
 */

/**
 * @param {import('../index').FSWatcher} fsw
 */

/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */

/**
 * @param {string} str
 * @param {Object} opts
 * @param {boolean} [opts.flipBackslashes=true]
 */

/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */

/**
 * @return {?object} A SyntheticCompositionEvent.
 */

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */

/**
 * @type {Map<String,FsWatchContainer>}
 */

/**
 * @typedef {Object} FsWatchContainer
 * @property {Set} listeners
 * @property {Set} errHandlers
 * @property {Set} rawEmitters
 * @property {fs.FSWatcher=} watcher
 * @property {Boolean=} watcherUnusable
 */

/**
 * @typedef {Object} ReaddirpArguments
 * @property {Function=} fileFilter
 * @property {Function=} directoryFilter
 * @property {String=} type
 * @property {Number=} depth
 * @property {String=} root
 * @property {Boolean=} lstat
 * @property {Boolean=} bigint
 */

/**
 * @typedef {String} Path
 */

/**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */

/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

/**
 * A hook to access the redux store.
 *
 * @returns {any} the redux store
 *
 * @example
 *
 * import React from 'react'
 * import { useStore } from 'react-redux'
 *
 * export const ExampleComponent = () => {
 *   const store = useStore()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A list of event names to a configurable list of vendor prefixes.
 */

/**
 * Adds paths to be watched on an existing FSWatcher instance
 * @param {Path|Array<Path>} paths_
 * @param {String=} _origAdd private; for handling non-existent paths to be watched
 * @param {Boolean=} _internal private; indicates a non-user add
 * @returns {FSWatcher} for chaining
 */

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */

/**
 * Awaits write operation to finish.
 * Polls a newly created file for size variations. When files size does not change for 'threshold' milliseconds calls callback.
 * @param {Path} path being acted upon
 * @param {Number} threshold Time in milliseconds a file size must be fixed before acknowledging write OP is finished
 * @param {EventName} event
 * @param {Function} awfEmit Callback to be called when ready for event to be emitted.
 */

/**
 * Base class helpers for the updating state of a component.
 */

/**
 * Bootstrap if a DOM exists.
 */

/**
 * Cache
 */

/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

/**
 * Check for read permissions.
 * Based on this answer on SO: https://stackoverflow.com/a/11781404/1358405
 * @param {fs.Stats} stats - object, result of fs_stat
 * @returns {Boolean} indicates whether the file can be read
*/

/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

/**
 * Close watchers and remove all listeners from watched paths.
 * @returns {Promise<void>}.
*/

/**
 * Close watchers or start ignoring events from specified paths.
 * @param {Path|Array<Path>} paths_ - string or array of strings, file/directory paths and/or globs
 * @returns {FSWatcher} for chaining
*/

/**
 * Closes all watchers for a path
 * @param {Path} path
 */

/**
 * Closes only file-specific watchers
 * @param {Path} path
 */

/**
 * Common handler for errors
 * @param {Error} error
 * @returns {Error|Boolean} The error if defined, otherwise the value of the FSWatcher instance's `closed` flag
 */

/**
 * Compiles a brace pattern into a regex-compatible, optimized string.
 * This method is called by the main [braces](#braces) function by default.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.compile('a/{b,c}/d'));
 * //=> ['a/(b|c)/d']
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Constants
 */

/**
 * Convenience component with default shallow equality check for sCU.
 */

/**
 * Convert a range to a regex pattern
 * @param {Number} `start`
 * @param {Number} `stop`
 * @return {String}
 */

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

/**
 * Create a regular expression from a parsed glob pattern.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const state = picomatch.parse('*.js');
 * // picomatch.compileRe(state[, options]);
 *
 * console.log(picomatch.compileRe(state));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `state` The object returned from the `.parse` method.
 * @param {Object} `options`
 * @return {RegExp} Returns a regex created from the given pattern.
 * @api public
 */

/**
 * Create a regular expression from the given regex source string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.toRegex(source[, options]);
 *
 * const { output } = picomatch.parse('*.js');
 * console.log(picomatch.toRegex(output));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `source` Regular expression source string.
 * @param {Object} `options`
 * @return {RegExp}
 * @api public
 */

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */

/**
 * Create an error file out of errors.md for development and a simple web link to the full errors
 * in production mode.
 */

/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a braces string from an AST, or an AST node.
 *
 * ```js
 * const braces = require('braces');
 * let ast = braces.parse('foo/{a,b}/bar');
 * console.log(stringify(ast.nodes[2])); //=> '{a,b}'
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

/**
 * Creates a matcher function from one or more glob patterns. The
 * returned function takes a string to match as its first argument,
 * and returns true if the string is a match. The returned matcher
 * function also takes a boolean as the second argument that, when true,
 * returns an object with additional information.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch(glob[, options]);
 *
 * const isMatch = picomatch('*.!(*a)');
 * console.log(isMatch('a.a')); //=> false
 * console.log(isMatch('a.b')); //=> true
 * ```
 * @name picomatch
 * @param {String|Array} `globs` One or more glob patterns.
 * @param {Object=} `options`
 * @return {Function=} Returns a matcher function.
 * @api public
 */

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

/**
 * Determines whether user has asked to ignore this path.
 * @param {Path} path filepath or dir
 * @param {fs.Stats=} stats result of fs.stat
 * @returns {Boolean}
 */

/**
 * Directory entry.
 * @property {Path} path
 * @property {Set<Path>} items
 */

/**
 * Does a generic check to check that the given payload is of a given type.
 * In cases like Number, it will return true for NaN as NaN is a Number (thanks javascript!);
 * It will, however, differentiate between object and null
 *
 * @template T
 * @param {*} payload
 * @param {T} type
 * @throws {TypeError} Will throw type error if type is an invalid type
 * @returns {payload is T}
 */

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */

/**
 * Does our fallback mode think that this event is the end of composition?
 */

/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

/**
 * Escape the given node with '\\' before node.value
 */

/**
 * Event names that have already been detected and prefixed (if applicable).
 */

/**
 * Expands a brace pattern into an array. This method is called by the
 * main [braces](#braces) function when `options.expand` is true. Before
 * using this method it's recommended that you read the [performance notes](#performance))
 * and advantages of using [.compile](#compile) instead.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.expand('a/{b,c}/d'));
 * //=> ['a/b/d', 'a/c/d'];
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

/**
 * Expose "braces"
 */

/**
 * Expose "picomatch"
 */

/**
 * Expose `toRegexRange`
 */

/**
 * Expose list of watched paths
 * @returns {Object} for chaining
*/

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */

/**
 * Fast paths for creating regular expressions for common glob patterns.
 * This can significantly speed up processing and has very little downside
 * impact when none of the fast paths match.
 */

/**
 * Find a node of the given type
 */

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */

/**
 * Flatten an array
 */

/**
 * For IE shims
 */

/**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */

/**
 * Get document associated with the event target.
 */

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */

/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */

/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */

/**
 * Handle added file, directory, or glob pattern.
 * Delegates call to _handleFile / _handleDir after checks.
 * @param {String} path to file or ir
 * @param {Boolean} initialAdd was the file added at watch instantiation?
 * @param {Object} priorWh depth relative to user-supplied path
 * @param {Number} depth Child path actually targeted for watch
 * @param {String=} target Child path actually targeted for watch
 * @returns {Promise}
 */

/**
 * Handle added path with fsevents
 * @param {String} path file/dir path or glob pattern
 * @param {Function|Boolean=} transform converts working path to what the user expects
 * @param {Boolean=} forceAdd ensure add is emitted
 * @param {Number=} priorDepth Level of subdirectories already traversed.
 * @returns {Promise<void>}
 */

/**
 * Handle symlinks encountered during directory scan
 * @param {String} linkPath path to symlink
 * @param {String} fullPath absolute path to the symlink
 * @param {Function} transform pre-existing path transformer
 * @param {Number} curDepth level of subdirectories traversed to where symlink is
 * @returns {Promise<void>}
 */

/**
 * Handle symlinks encountered during directory scan
 * @param {String} watchPath  - file/dir path to be watched with fsevents
 * @param {String} realPath   - real path (in case of symlinks)
 * @param {Function} transform  - path transformer
 * @param {Function} globFilter - path filter in case a glob pattern was provided
 * @returns {Function} closer for the watcher instance
*/

/**
 * Handle symlinks encountered while reading a dir.
 * @param {Object} entry returned by readdirp
 * @param {String} directory path of dir being read
 * @param {String} path of this item
 * @param {String} item basename of this item
 * @returns {Promise<Boolean>} true if no more processing is needed for this entry.
 */

/**
 * Handles emitting unlink events for
 * files and directories, and via recursion, for
 * files and directories within directories that are unlinked
 * @param {String} directory within which the following item is located
 * @param {String} item      base path of item/directory
 * @returns {void}
*/

/**
 * Helper for passing fs_watch event data to a collection of listeners
 * @param {Path} fullPath absolute path bound to fs_watch instance
 * @param {String} type listener type
 * @param {*=} val1 arguments to be passed to listeners
 * @param {*=} val2
 * @param {*=} val3
 */

/**
 * Helper utility for throttling
 * @param {ThrottleType} actionType type being throttled
 * @param {Path} path being acted upon
 * @param {Number} timeout duration of time to suppress duplicate actions
 * @returns {Object|false} tracking object or false if action should be suppressed
 */

/**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */

/**
 * Implements an <option> host component that warns when `selected` is set.
 */

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */

/**
 * Instantiates the fs_watch interface
 * @param {String} path to be watched
 * @param {Object} options to be passed to fs_watch
 * @param {Function} listener main event handler
 * @param {Function} errHandler emits info about errors
 * @param {Function} emitRaw emits raw event data
 * @returns {fs.FSWatcher} new fsevents instance
 */

/**
 * Instantiates the fs_watch interface or binds listeners
 * to an existing one covering the same file system entry
 * @param {String} path
 * @param {String} fullPath absolute path
 * @param {Object} options to be passed to fs_watch
 * @param {Object} handlers container for event listener functions
 */

/**
 * Instantiates the fsevents interface or binds listeners to an existing one covering
 * the same file tree.
 * @param {Path} path           - to be watched
 * @param {Path} realPath       - real path for symlinks
 * @param {Function} listener   - called when fsevents emits events
 * @param {Function} rawEmitter - passes data to listeners of the 'raw' event
 * @returns {Function} closer
 */

/**
 * It's falsish not falsy because 0 is allowed.
 */

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */

/**
 * Keeps track of the current dispatcher.
 */

/**
 * Main function which ends up calling readdirRec and reads all files and directories in given root recursively.
 * @param {String} root Root directory
 * @param {ReaddirpArguments=} options Options to specify root (start directory), filters and recursion depth
 */

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */

/**
 * Match the basename of a filepath.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.matchBase(input, glob[, options]);
 * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).
 * @return {Boolean}
 * @api public
 */

/**
 * Merge anything recursively.
 * Objects get merged, special objects (classes etc.) are re-assigned "as is".
 * Basic types overwrite objects or other basic types.
 *
 * @param {(IConfig | any)} origin
 * @param {...any[]} newComers
 * @returns the result
 */

/**
 * Normalize and emit events.
 * Calling _emit DOES NOT MEAN emit() would be called!
 * @param {EventName} event Type of event
 * @param {Path} path File or directory path
 * @param {*=} val1 arguments to be passed with event
 * @param {*=} val2
 * @param {*=} val3
 * @returns the error if defined, otherwise the value of the FSWatcher instance's `closed` flag
 */

/**
 * Operations for dealing with CSS properties.
 */

/**
 * Parse a glob pattern to create the source string for a regular
 * expression.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const result = picomatch.parse(pattern[, options]);
 * ```
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {Object} Returns an object with useful properties and output to be used as a regex source string.
 * @api public
 */

/**
 * Parse the given `str` with the given `options`.
 *
 * ```js
 * // braces.parse(pattern, [, options]);
 * const ast = braces.parse('a/{b,c}/d');
 * console.log(ast);
 * ```
 * @param {String} pattern Brace pattern to parse
 * @param {Object} options
 * @return {Object} Returns an AST
 * @api public
 */

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

/**
 * Picomatch constants.
 * @return {Object}
 */

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Processes a brace pattern and returns either an expanded array
 * (if `options.expand` is true), a highly optimized regex-compatible string.
 * This method is called by the main [braces](#braces) function.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
 * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

/**
 * Provides a set of common helpers and properties relating to symlink and glob handling.
 * @param {Path} path file, directory, or glob pattern being watched
 * @param {Number=} depth at any depth > 0, this isn't a glob
 * @returns {WatchHelper} object containing helpers for this path
 */

/**
 * Provides directory tracking objects
 * @param {String} directory path of the directory
 * @returns {DirEntry} the directory's tracking object
 */

/**
 * Read directory to add / remove files from `@watched` list and re-read it on change.
 * @param {String} dir fs path
 * @param {fs.Stats} stats
 * @param {Boolean} initialAdd
 * @param {Number} depth relative to user-supplied path
 * @param {String} target child path targeted for watch
 * @param {Object} wh Common watch helpers for this path
 * @param {String} realpath
 * @returns {Promise<Function>} closer for the watcher instance.
 */

/**
 * Reduce an array of text nodes.
 */

/**
 * Resets warning cache when testing.
 *
 * @private
 */

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */

/**
 * Returns the object type of the given payload
 *
 * @param {*} payload
 * @returns {string}
 */

/**
 * Returns true if **any** of the given glob `patterns` match the specified `string`.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.isMatch(string, patterns[, options]);
 *
 * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true
 * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false
 * ```
 * @param {String|Array} str The string to test.
 * @param {String|Array} patterns One or more glob patterns to use for matching.
 * @param {Object} [options] See available [options](#options).
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

/**
 * Returns true if a brace node is invalid.
 */

/**
 * Returns true if a node is an open or close node
 */

/**
 * Returns true if the given brace node should be enclosed in literal braces
 */

/**
 * Returns true whether the payload is null or undefined
 *
 * @param {*} payload
 * @returns {(payload is null | undefined)}
 */

/**
 * Returns whether the payload is ''
 *
 * @param {*} payload
 * @returns {payload is string}
 */

/**
 * Returns whether the payload is a Blob
 *
 * @param {*} payload
 * @returns {payload is Blob}
 */

/**
 * Returns whether the payload is a Date, and that the date is valid
 *
 * @param {*} payload
 * @returns {payload is Date}
 */

/**
 * Returns whether the payload is a File
 *
 * @param {*} payload
 * @returns {payload is File}
 */

/**
 * Returns whether the payload is a Map
 *
 * @param {*} payload
 * @returns {payload is Map<any, any>}
 */

/**
 * Returns whether the payload is a Promise
 *
 * @param {*} payload
 * @returns {payload is Promise<any>}
 */

/**
 * Returns whether the payload is a Set
 *
 * @param {*} payload
 * @returns {payload is Set<any>}
 */

/**
 * Returns whether the payload is a Symbol
 *
 * @param {*} payload
 * @returns {payload is symbol}
 */

/**
 * Returns whether the payload is a WeakMap
 *
 * @param {*} payload
 * @returns {payload is WeakMap<any, any>}
 */

/**
 * Returns whether the payload is a WeakSet
 *
 * @param {*} payload
 * @returns {payload is WeakSet<any>}
 */

/**
 * Returns whether the payload is a an array with at least 1 item
 *
 * @param {*} payload
 * @returns {payload is any[]}
 */

/**
 * Returns whether the payload is a an empty array
 *
 * @param {*} payload
 * @returns {payload is []}
 */

/**
 * Returns whether the payload is a an empty object (excluding special classes or objects with other prototypes)
 *
 * @param {*} payload
 * @returns {payload is { [K in any]: never }}
 */

/**
 * Returns whether the payload is a boolean
 *
 * @param {*} payload
 * @returns {payload is boolean}
 */

/**
 * Returns whether the payload is a function (regular or async)
 *
 * @param {*} payload
 * @returns {payload is AnyFunction}
 */

/**
 * Returns whether the payload is a number (but not NaN)
 *
 * This will return `false` for `NaN`!!
 *
 * @param {*} payload
 * @returns {payload is number}
 */

/**
 * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)
 *
 * @param {*} payload
 * @returns {payload is Record<string, any>}
 */

/**
 * Returns whether the payload is a primitive type (eg. Boolean | Null | Undefined | Number | String | Symbol)
 *
 * @param {*} payload
 * @returns {(payload is boolean | null | undefined | number | string | symbol)}
 */

/**
 * Returns whether the payload is a regular expression (RegExp)
 *
 * @param {*} payload
 * @returns {payload is RegExp}
 */

/**
 * Returns whether the payload is a string
 *
 * @param {*} payload
 * @returns {payload is string}
 */

/**
 * Returns whether the payload is a string, BUT returns false for ''
 *
 * @param {*} payload
 * @returns {payload is string}
 */

/**
 * Returns whether the payload is an Error
 *
 * @param {*} payload
 * @returns {payload is Error}
 */

/**
 * Returns whether the payload is an any kind of object (including special classes or objects with different prototypes)
 *
 * @param {*} payload
 * @returns {payload is Record<string, any>}
 */

/**
 * Returns whether the payload is an array
 *
 * @param {any} payload
 * @returns {payload is any[]}
 */

/**
 * Returns whether the payload is an object like a type passed in < >
 *
 * Usage: isObjectLike<{id: any}>(payload) // will make sure it's an object and has an `id` prop.
 *
 * @template T this must be passed in < >
 * @param {*} payload
 * @returns {payload is T}
 */

/**
 * Returns whether the payload is literally the value `NaN` (it's `NaN` and also a `number`)
 *
 * @param {*} payload
 * @returns {payload is typeof NaN}
 */

/**
 * Returns whether the payload is null
 *
 * @param {*} payload
 * @returns {payload is null}
 */

/**
 * Returns whether the payload is undefined
 *
 * @param {*} payload
 * @returns {payload is undefined}
 */

/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */

/**
 * SECTION: handle `click` event
 */

/**
 * SECTION: handle `input` event
 */

/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

/**
 * Scan a glob pattern to separate the pattern into segments.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.scan(input[, options]);
 *
 * const result = picomatch.scan('!./foo/*.js');
 * console.log(result);
 * { prefix: '!./',
 *   input: '!./foo/*.js',
 *   start: 3,
 *   base: 'foo',
 *   glob: '*.js',
 *   isBrace: false,
 *   isBracket: false,
 *   isGlob: true,
 *   isExtglob: false,
 *   isGlobstar: false,
 *   negated: true }
 * ```
 * @param {String} `input` Glob pattern to scan.
 * @param {Object} `options`
 * @return {Object} Returns an object with
 * @api public
 */

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */

/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */

/**
 * TODO: Explore using CSS.escape when it becomes more available
 * in evergreen browsers.
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

/**
 * Test `input` with the given `regex`. This is used by the main
 * `picomatch()` function to test the input string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.test(input, regex[, options]);
 *
 * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\/([^/]*?))$/));
 * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp} `regex`
 * @return {Object} Returns an object with matching info.
 * @api public
 */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */

/**
 * This is the abstract API for an update queue.
 */

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */

/**
 * Translate native top level events into event types.
 */

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */

/**
 * Turns
 * ['abort', ...]
 *
 * into
 *
 * topLevelEventsToReactNames = new Map([
 *   ['abort', 'onAbort'],
 * ]);
 *
 * and registers them.
 */

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

/**
 * Used by act() to track whether you're inside an act() scope.
 */

/**
 * Validation function for `value` and `defaultValue`.
 */

/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */

/**
 * Watch a file and emit add event if warranted.
 * @param {Path} file Path
 * @param {fs.Stats} stats result of fs_stat
 * @param {Boolean} initialAdd was the file added at watch instantiation?
 * @returns {Function} closer for the watcher instance
 */

/**
 * Watch file for changes with fs_watchFile or fs_watch.
 * @param {String} path to file or dir
 * @param {Function} listener on fs change
 * @returns {Function} closer for the watcher instance
 */

/**
 * Watches files & directories for changes. Emitted events:
 * `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `all`, `error`
 *
 *     new FSWatcher()
 *       .add(directories)
 *       .on('add', path => log('File', path, 'was added'))
 */

/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */

/**
 * Zip strings
 */

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */

/**
 * super basic version of sprintf
 */

/** @license React v0.20.1
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v0.20.1
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.14.0
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.1
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @noinline */

/** @type Array<any> */

/** @type {Map<Path, Object>} */

/** @type {Map<Path, String|Boolean>} */

/** @type {Map<String, Array>} */

/** @type {Map<String, DirEntry>} */

/** @type {Map<ThrottleType, Map>} */

/** @type {Object} */

/** @type {Set<Path>} */

/** @type {Set<String>} */

/** @type {fs.FSWatcher=} */

/** @type {object|boolean} */

/** Built-in constructor references. */

/** Used as a safe reference for `undefined` in pre-ES5 environments. */

/** Used as the semantic version number. */

/** Used for built-in method references. */

/** Used to identify `toStringTag` values supported by `_.clone`. */

/** Used to map Latin Unicode letters to basic Latin letters. */

/** Used to map characters to HTML entities. */

/************************************************************************/

/******/

/***/

/*------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/

/*eslint-disable no-self-compare*/

/*eslint-enable no-self-compare*/

//

// 

//    always know when it is a fiber.

//    compatible.

//    is faster.

//    is used by selectorFactory to decide if it should reinvoke on props changes.

//    more difficult to predict when they get optimized and they are almost

//    never inlined properly in static compilers.

//    new function as the true mapToProps for subsequent calls.

//    the developer that their mapToProps function is not returning a valid result.

//    to optimize in a non-JIT environment.

//   1. The checked React property when present

//   1. The value React property when present

//   2. The defaultChecked React property when present

//   2. The defaultValue React property when present

//   3. An empty string

//   3. Otherwise, false

//  * Detects whether the mapToProps function being called depends on props, which

//  * On first call, handles mapToProps if returns another function, and treats that

//  * On first call, verifies the first result is a plain object, in order to warn

//  1. The value React property

//  2. The defaultValue React property

//  3. Otherwise there should be no change

//  `select` elements automatically pick the first item #13222

// "Member not found" in strict mode, and in Firefox which does not

// "Pause on exceptions" behavior. Because React wraps all user-provided

// "Registers" used to "return" multiple values

// "Upgrade" the watcher to persistence or a quicker interval.

// "break on all exceptions" in your console,

// "consumed" by the delegate iterator. If context.method was

// "retries" — a special update that attempts to flip a Suspense boundary

// "return" to "throw", let that override the TypeError below.

// "return", allow the original .return call to continue in the

// "stack" as the parent. Then append children as we go in beginWork

// $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests

// $FlowFixMe

// $FlowFixMe - Should be inferred as not undefined.

// $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

// $FlowFixMe Flow doesn't know about ArrayBuffer

// $FlowFixMe Flow doesn't know about SharedArrayBuffer

// $FlowFixMe Flow doesn't know about toStringTag

// $FlowFixMe Flow gets confused by a WeakSet feature check below.

// $FlowFixMe Flow thinks console is immutable.

// $FlowFixMe It does accept undefined.

// $FlowFixMe The Flow type is opaque but there's no way to actually create it.

// $FlowFixMe This is okay but Flow doesn't know it.

// $FlowFixMe This should probably use `delete container._reactRootContainer`

// $FlowFixMe number or string is fine here

// $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

// $FlowFixMe: Flow complains about not setting a value, which is intentional here

// $FlowFixMe: Flow doesn't like mixed types

// $FlowFixMe: Ignore Flow complaining about needing a value

// $FlowFixMe: Not typed to avoid destructuring arguments

// $FlowFixMe: the shapes are exact here but Flow doesn't like constructors

// $FlowIssue Flow incorrectly thinks Map has no prototype

// $FlowIssue Flow incorrectly thinks Set has no prototype

// $FlowIssue `createElement` should be updated for Web Components

// $FlowIssue symbol is perfectly valid here

// (For instance: TinyMCE editor used in a list component that supports pasting to add more,

// (Rendering will throw with a helpful message and as soon as the type is

// (There's no appropriate action type for DevTools overrides.)

// (and would be incorrectly rendered on the client).

// (because the hook only marks sources as dirty if it's written to their WIP version).

// (eg DOM renderer may schedule auto-focus for inputs and form controls).

// (eg DOM renderer supports auto-focus for certain elements).

// (http://ejohn.org/blog/javascript-micro-templating/)

// (inside this function), since by suspending at the end of the render

// (may be shared across chokidar FSWatcher instances)

// (needed for certain tests that spyOn input values and Safari)

// (other than symlinks being followed, which will be tracked soon)

// *unhide* children that were previously hidden, so check if this

// - BeforeInputEventPlugin

// - ChangeEventPlugin

// - EnterLeaveEventPlugin

// - However, we may have gotten new wrapper props after that

// - SelectEventPlugin

// - This render may have been triggered by a Redux store update that produced new child props

// - a bug where the `select` does not scroll to the correct option because singular

// - a bug where the `select` set the first item as selected despite the `size` attribute #14239

// --- Welcome to debugging React ---

// ------------

// --------------

// -----------------

// -------------------

// -progress queue, we need to clone the updates. We usually clone during

// ...)) which otherwise throws a "_processChildContext is not a function"

// .constructor.prototype properties for functions that return Generator

// .throw, and .return (see defineIteratorMethods).

// .throw, and .return methods.

// 0b111111111111111111111111111111

// 1) "delayed", 2) "initial render", 3) "retry".

// 1) Nobody should add any instance methods on this. Instance methods can be

// 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'

// 2) Nobody should rely on `instanceof Fiber` for type testing. We should

// 3) We might want to experiment with using numeric keys since they are easier

// 4) We can easily go from a constructor to a createFiber object literal if that

// 5) It should be easy to port this to a C struct and keep a C implementation

// 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire

// <select> value update needs to occur after <option> children

// @@iterator function is called on it. Some browsers' implementations of the

// @font-face, @page

// @import

// @see http://www.quirksmode.org/js/events_properties.html

// @see https://electronjs.org/docs/api/webview-tag

// @ts-ignore

// A .throw or .return when the delegate iterator has no .throw

// A C0 control is a code point in the range \u0000 NULL to \u001F

// A Generator should always return itself as the iterator object when the

// A changed version number will let those components know to throw and restart the render.

// A class component without an instance only mounts if it suspended

// A cursor to a boolean indicating whether the context has changed.

// A cursor to the current merged context object on the stack.

// A few React string attributes have a different name.

// A fiber's effect list consists only of its children, not itself. So if

// A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or

// A lane is said to be entangled with another when it's not allowed to render

// A lazy component only mounts if it suspended inside a non-

// A length of one signals that mapToProps does not depend on props from the parent component.

// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and

// A reserved attribute.

// A safety way is to access one of the cross origin properties: Window or Location

// A selector might throw after a source mutation.

// ATTENTION

// Accessing the contentDocument of a HTMLIframeElement can cause the browser

// Accumulate all instances and listeners via the target -> root path.

// ActiveX objects in IE.

// Actually run the selector with the most recent store state and wrapper props

// Actually subscribe to the nearest connected ancestor (or store)

// Add `Array` methods to `lodash.prototype`.

// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.

// Add `LazyWrapper` methods for `_.head` and `_.last`.

// Add `LazyWrapper` methods for `_.initial` and `_.tail`.

// Add `LazyWrapper` methods that accept an `iteratee` value.

// Add `LazyWrapper` methods to `lodash.prototype`.

// Add aliases.

// Add all children to a key map for quick lookups.

// Add an extra top frame while an element is being validated

// Add chain sequence methods to the `lodash` wrapper.

// Add lazy aliases.

// Add methods that return unwrapped values in chain sequences.

// Add methods that return wrapped values in chain sequences.

// Add methods to `Hash`.

// Add methods to `LazyWrapper`.

// Add methods to `ListCache`.

// Add methods to `MapCache`.

// Add methods to `SetCache`.

// Add methods to `Stack`.

// Add methods to `lodash.prototype`.

// Add properties assigned by `RegExp#exec`.

// Add the remaining children to a temporary map so that we can find them by

// After all the children have unmounted, it is now safe to remove the

// After these have been cleaned up, we'll let them throw.

// After this we'll use a set of heuristics to determine whether this

// All of the above are perceived as null.

// All remaining items in the tail are insertions.

// All tasks are delayed, and this is the task with the earliest delay.

// All the transition lanes are taken, too. This should be very

// Allow injecting another batching function later

// Allow null for conditional declaration

// Alphabet chars.

// Already timed out, so perform work without checking if we need to yield.

// Also validate hook order for cascading updates.

// Always call this before exiting `commitRoot`, to ensure that any

// Always collect profile timings when DevTools are present.

// Always set children to the same thing. In IE9, the selection range will

// An `NaN` primitive is the only value that is not equal to itself.

// An incomplete component only mounts if it suspended inside a non-

// An indeterminate component only mounts if it suspended inside a non-

// An update was scheduled from inside a reducer. Add the new

// Any existing children that weren't consumed above were deleted. We need

// Any insertions at the end of the tail list after this point

// Any reducers that existed in both the new and old rootReducer

// Anything lower than normal priority should remain at the current level.

// Append a new context item.

// Append all the effects of the subtree and this fiber onto the effect

// Append pending updates to base queue

// Append the captured update the end of the cloned list.

// Append the rendered row to the child list.

// Append the update to the end of the list.

// Append to the beginning of the list.

// Append to the end of the list

// Append to the end of the list.

// Apply the diff to the DOM node.

// Apply the diff.

// As a result though, React will see the scheduled update as a noop and bailout.

// As a workaround to support multiple concurrent renderers, we categorize

// As the event types are in pairs of two, we need to iterate

// Assign default placeholders.

// Assign the result of the finished delegate to the temporary

// Assume cyclic values are equal.

// Assumes there is no parent namespace.

// Assumes timestamps are monotonically increasing.

// AsyncIterator objects; they just return a Promise for the value of

// AsyncMode is deprecated along with isAsyncMode

// AsyncMode should be deprecated

// At the same time we're going to reverse the list of everything

// At this point, the return fiber's effect list is empty except for

// Attach a listener to the promise to "ping" the root and retry. But only if

// Attach our event handlers

// Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

// Attempt to complete the current unit of work, then move to the next

// Attempt to increase the priority of this target.

// Attempting the main content

// Avoid an extra prototype jump for these methods.

// Avoid conflicts if we later create another file with the same name

// Avoid deopting on observable arguments or heterogeneous types.

// Avoid failures from read-only properties

// Avoid lazy use if the iteratee has a "length" value other than `1`.

// Avoid propagating failures to Promises returned by later

// Avoid recreating masked context unless unmasked context has changed.

// Avoid setting value attribute on submit/reset inputs as it overrides the

// Avoid spamming the console because they are often not actionable except for lib authors

// Based on John Resig's `tmpl` implementation

// Based on the previous check, one of these must be true

// Based on:

// Batching is necessary here in order to ensure that all event handlers run

// Be forgiving, per 25.3.3.3.3 of the spec:

// Because this fiber did not complete, don't reset its expiration time.

// Before Symbol spec.

// Before entering the begin phase, clear pending update priority.

// Before entering the begin phase, copy the work-in-progress onto a dummy

// Before exiting, make sure there's a callback scheduled for the next

// Boundaries without fallbacks or should be avoided are not considered since

// Browser does not implement `key`, polyfill as much of it as we can.

// Browsers introduced an intervention, making these events

// Browsers support silencing uncaught errors by calling

// Browsers without "deltaMode" is reporting in raw wheel delta where one

// Bubble up the earliest expiration time.

// Built-in SSR attribute is allowed

// Built-in properties that belong on the element

// But in the event that it's executed more than once–

// But only if this has a fallback.

// But we shouldn't call any lifecycle methods or callbacks. Remove

// But works for yielding (the common case) and should support resuming.

// But, if we have new wrapper props, those might change the child props, so we have to recalculate things.

// By default, return `true` to log errors to the console.

// By explicitly using `prop-types` you are opting into new development behavior.

// Bytes per element is 4

// CSP to forbid Function, and you're not willing to fix either of those

// Cache unmasked context so we can avoid recreating masked context unless necessary.

// Calculate the diff between the two objects.

// Call delegate.iterator[context.method](context.arg) and handle the

// Calling defineProperty() again should be equivalent.

// Cancel an existing timeout.

// Capture and retry

// Capture errors so they don't interrupt unmounting.

// Capture local references to native APIs, in case a polyfill overrides them.

// Capture values for checking if and when this component unmounts

// Captured a suspense effect. Re-render the boundary.

// Captured updates are updates that are thrown by a child during the render

// Careful!

// Careful: RN currently depends on this prefix

// Cast `value` to a string to ensure the value is set correctly. While

// Caution: React DevTools currently depends on this property

// Certain renderers require commit-time effects for initial mount.

// Check `path` instead of `absPath` because the cwd portion can't be a glob

// Check for a possible change between when we last rendered now.

// Check for circular references and return its corresponding clone.

// Check for entangled lanes and add them to the batch.

// Check for tasks that are no longer delayed and add them to the queue.

// Check if MessageChannel is supported, too.

// Check if any lanes are being starved by other work. If so, mark them as

// Check if any work has expired.

// Check if both types have a family and it's the same one.

// Check if browser support events with passive listeners

// Check if item was on the watched list and remove it

// Check if module is in cache

// Check if previous string ref matches new string ref

// Check if the children have any pending work.

// Check if the context matches.

// Check if the work completed or if something threw.

// Check if the work-in-progress queue is a clone.

// Check if there are updates that we skipped tree that might have unblocked

// Check if there was a render phase update

// Check if there's an existing task. We may be able to reuse it.

// Check if there's remaining work on this root

// Check if this host node is stable or about to be placed.

// Check if this target is unblocked. Returns true if it's unblocked.

// Check if we're dealing with a real forwardRef. Don't want to crash early.

// Check if we're inside unbatchedUpdates

// Check if we're not already rendering

// Check that change event was not fired because of changed only accessTime.

// Check that cyclic values are equal.

// Check that the browser supports the APIs we need to implement our special

// Check to protect against issue gh-730.

// Children can be more than one argument, and those are transferred onto

// Chrome and IE fire non-standard event when selection is changed (and

// Chrome raises "The specified value <x> is not a valid email address".

// Circular

// Classes usually have names (as functions usually have names)

// Cleanup code by stripping empty strings.

// Clear ContentReset from the effect tag

// Clear already finished discrete updates in case that a later call of

// Clear completed interactions from the pending Map.

// Clear the "placement" from effect tag so that we know that this is

// Clone from the current hook.

// Clone the dependencies object. This is mutated during the render phase, so

// Clone the update queue from current. Unless it's already a clone.

// Coerce booleans to `1` or `0` and dates to milliseconds.

// Coerce regexes to strings and treat strings, primitives and objects,

// Combine passed cssRules with previously deferred CSS rules

// Command keys insert or clear IME input.

// Commit the effects

// Commit the placeholder.

// Commit the work prepared earlier.

// Common helpers

// Compare sort index first, then task id.

// Completing this fiber spawned new work. Work on that next.

// Compose partial arguments.

// Compose partial right arguments.

// Computes the next Just Noticeable Difference (JND) boundary.

// Conceptually the HostRoot fiber is a child of the Container node. So if you

// Conceptually this is similar to Placement in that a new subtree is

// Conceptually, this is really the same as pinging. We can use any

// Confirmed that the boundary is in a concurrent mode tree. Continue

// Connect to the new tree.

// Consider removing.

// Context is created before the class component is instantiated so check for instance.

// Context list has a pending update. Mark that this fiber performed work.

// Context providers should defer to sCU for rendering

// Contrary to `setAttribute`, object properties are properly

// Controlled attributes are not validated

// Convince Flow we've calculated it (it's DEV-only in this method.)

// Count leading zeros. Only used on lanes, so assume input is an integer.

// Count of children found in the current subtree.

// Count the number of times the root synchronously re-renders without

// Counters used to generate unique IDs.

// Create a fake event type.

// Create a global error event handler. We use this to capture the value

// Create a new module (and put it into the cache)

// Create a new queue and setState method,

// Create an event handler for our fake event. We will synchronously

// Create the script via .innerHTML so its "parser-inserted" flag is

// Currently this is only used with renderSubtreeIntoContainer; not sure if it

// Cut off the return pointers to disconnect it from the tree. Ideally, we

// DEV mode, we create a separate object for Context.Consumer that acts

// DEV version of invokeGuardedCallback

// DEV-only fields

// DOM after hydrating, and there are boundaries in the DOM

// DOM component is still mounted; update

// DOM node, and call the user-provided callback from inside an event handler

// DOM properties, then it is an invalid aria-* attribute.

// Decide whether or not we should start a new higher-level

// Dedup strategy: Warn once per component.

// Dedupe by the rendering component because it's the one that needs to be fixed.

// Default

// Default to a ContinuousEvent. Note: we might

// Default to a dummy "batch" implementation that just runs the callback

// Default to shallow comparison

// Defaults

// Defensive coding. This is never expected to happen.

// Define Generator.prototype.{next,throw,return} in terms of the

// Define the unified helper method that is used to implement .next,

// Definitely a string, and a clone

// Delegate to the injected renderer-specific implementation

// Delete the fallback child fragment

// Delete the old fiber and place the new one.

// Deletions are added in reversed order so we add it to the front.

// Deliberately forget the last sent value so that we don't

// Despite the naming that might imply otherwise, this method only

// Detach refs and call componentWillUnmount() on the whole subtree.

// Detach the insertion after the last node that was already

// Detect buggy property enumeration order in older V8 versions.

// Determine the next expiration time to work on, using the fields stored

// Determine the next lanes to work on, and their priority.

// DevTools exists

// DevTools exists, even though it doesn't support Fiber.

// Didn't match.

// Digits

// Directory helpers

// Disconnect from the old current.

// Disconnect the alternate pointers.

// Disconnect the tail rows after the content row.

// Dispatch the exception by looping back around to the

// Distinguish between actual "data" props that were passed to the wrapper component,

// Do a pass over the next row.

// Do not append effects to parents if a sibling failed to complete

// Do not assign value if it is already set. This prevents user text input

// Do not pop unless this Fiber provided the current context.

// Do not reset the effect list.

// Do not set `select.value` as exact behavior isn't consistent across all

// Do not work on any idle work until all the non-idle work has finished,

// Do some typechecking here since we call this blindly. We want to ensure

// Don't bother comparing lengths in prod because these arrays should be

// Don't bother with a very short suspense time.

// Don't change these two values. They're used by React Dev Tools.

// Don't count time spent in a timed out Suspense subtree as part of the base duration.

// Don't deduplicate because this legitimately causes bugs

// Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.

// Don't fire the event while the user is dragging. This matches the

// Don't need to call updateMouseMovementPolyfillState() here

// Don't pass through non HTML tags through to HTML elements

// Don't persist the state accumulated from the render phase updates to

// Don't push this Fiber's context unless it's unique.

// Don't replay promises. Treat everything else like an error.

// Don't reset current debug fiber, since we're about to work on the

// Don't return HostRoot or SuspenseComponent here.

// Don't scan deeper if this is a matching provider

// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.

// Don't update "base" render times for bailouts.

// Don't warn about react-lifecycles-compat polyfilled components.

// Don't warn about react-lifecycles-compat polyfilled methods though.

// Don't warn in exotic cases like chrome-extension://.

// Drag-and-Drop Attributes

// Due to this, it is left to the user to implement at this time.

// Dummy constructor functions that we use as the .constructor and

// During mounting we don't know the child context yet as the instance doesn't exist.

// Each iteration, currentParent is populated with node's host parent if not

// Eager reads the version of a mutable source and stores it on the root.

// Early bailout if there's no pending work left.

// Edge fails with "Object expected" in some scenarios.

// Editor atomic write normalization enabled by default with fs.watch

// Effectively, this gives us try-catch behavior without actually using

// Effects

// Either this is the first call, activity has stopped and we're at the

// Electron ships a custom <webview> tag to display external web content in

// Elements are stringified (which is normally irrelevant

// Enable fsevents on OS X when polling isn't explicitly enabled.

// Enables DevTools to append owner stacks to error messages in DEV mode.

// Ensure `LazyWrapper` is an instance of `baseLodash`.

// Ensure the loop is entered when path is empty.

// Ensure the sign of `-0` is preserved.

// Ensure we have the right element, and that the user is not dragging a

// Ensure we transfer the update queue to the parent so that it doesn't

// Ensure wrappers are instances of `baseLodash`.

// Entangle the updates so that they render in the same batch.

// Equivalent of `typeof` but with special handling for array and regexp.

// Error was thrown at the root. There is no parent, so the root

// Escape characters that can't be included in string literals.

// Especially since these might also just pop in during future commits.

// Even better would be if children weren't special cased at all tho.

// Even if this property uses a namespace we use getAttribute

// Even if we abort and rereconcile the children, that will try to hydrate

// Even though we can't restart right now, we might get an

// Even when hot reloading, allow dependencies to stabilize

// Events are not possible without cancelling IME.

// Eventually we'll delete this branch altogether.

// Except for NoPriority, these correspond to Scheduler priorities. We use

// Exception thrown outside of any try block that could handle

// Execute the module function

// Exit early for strings to avoid a performance hit in some environments.

// Exit early if metadata can't be merged.

// Exit without suspending.

// Expect IME keyCode on each keydown. If we get any other

// Expected to be working on a non-root fiber. This is a fatal error

// Export FSWatcher class

// Export lodash.

// Expose Lodash on the global object to prevent errors when Lodash is

// Expose `MapCache`.

// Extra space so second column lines up

// Extract the VM specific prefix used by each line.

// FF does not set `charCode` for the Enter-key, check against `keyCode`.

// FIXME: More than one lane can finish in a single commit.

// FIXME: What if the suspended lanes are Idle? Should not restart.

// FSEVENT_CLONED,

// Fabric (secondary); React DOM (primary) and React ART (secondary).

// Failing to do this will result in unnecessary calls to componentWillReceiveProps.

// Fall back gracefully if we're running an older version of Scheduler.

// Fall back to the production implementation.

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

// Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).

// Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).

// Fallback to `wheelDelta` for IE<9 and normalize (down is positive).

// Fallback to just using the name if we couldn't make it throw.

// Fallback to nativeEvent.srcElement for IE9

// Fast path. We can bail out without scheduling React to re-render.

// Fiber

// File helpers

// Files that absent in current directory snapshot

// Files that present in current directory snapshot

// Finally, we flush all the warnings

// Finally, we need to push the host context to the stack.

// FireFox implements `key` but returns `MozPrintableKey` for all

// Firefox creates a click event on right mouse clicks. This removes the

// Firefox creates a keypress event for function keys too. This removes

// Firefox doesn't support selectionchange, so check selection status

// First clear any existing content.

// First look for lanes that are completely unclaimed, i.e. have no

// First pass: Destroy stale passive effects.

// First replay discrete events.

// First, Legacy Mode has different semantics for backwards compatibility. The

// First, let's check if we're in an unusual parsing mode...

// First, validate keys.

// Fix issues where mtime is null but file is still present

// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications

// Flag the module as loaded

// Flag this event loop as needing state restore.

// Flags that we're not actually blocked on anything as far as we know.

// Flatten children. We'll warn if they are invalid

// Flip backward selections, so we can set with a single range.

// Flow does not allow string concatenation of most non-string types. To work

// Flow knows about invariant, so it complains if I add a break

// Flow needs the return null here, but ESLint complains about it.

// Flush any pending passive effects before deciding which lanes to work on,

// Flush the immediate callbacks that were scheduled during this batch

// Flush the immediate callbacks that were scheduled during this batch.

// Flush the queue in the next tick, at the earliest.

// Flush the synchronous work now, unless we're already working or inside

// Focused number inputs synchronize on blur. See ChangeEventPlugin.js

// Focusing a node can change the scroll position, which is undesirable

// For HTML, certain tags should omit their close tag. We keep a list for

// For IE8 and IE9.

// For all non-delegated events, apart from scroll, we attach

// For all other deleted properties we add it to the queue. We use

// For any other property we always add it to the queue and then we

// For each root with pending discrete updates, schedule a callback to

// For each wakeable, attach a listener so that when it resolves, React

// For example, "undefined" or "of type array"

// For example, SuspenseList coordinates when nested content appears.

// For example, when unhiding a hidden tree, we include all the lanes

// For hydration we reuse the update path but we treat the oldProps

// For input and textarea we current always set the value property at

// For now, the "id" of stateful hooks is just the stateful hook index.

// For now, we use the same heuristic as in the old ExpirationTimes model:

// For number inputs, the display value loses trailing decimal points. For email inputs,

// For other native event types, do nothing.

// For simplicity, reapply `defaultValue` if `multiple` is toggled.

// For text content children we compare against textContent. This

// For the native GeneratorFunction constructor, the best we can

// For those exceptions where entanglement is semantically important, like

// Force a re-render if the implementation changed due to hot reload:

// Forks can return `false` if this isn't desirable.

// Fortunately this only impacts DEV builds.

// ForwardRef is special because its resolved .type is an object,

// Found a pending lane with no expiration time. If it's not suspended, or

// Found it!

// Found the nearest boundary.

// Frame code as the function body.

// Freeze the next style object so that we can assume it won't be

// GenStateExecuting and loop back for another invocation.

// Give the component that originally created this child.

// Given a DOM node, return the closest HostComponent or HostText fiber ancestor.

// Global override (useful for end-developers that need to force polling for all

// Guard against Fiber being unmounted.

// HTML

// HTML and attributes. Ideally we should preserve structure but it's

// HTML parsing normalizes CR and CRLF to LF.

// Handle invocations in a tight loop.

// Handle listeners that are on HostComponents (i.e. <div>)

// Handle object types

// Handle top level unkeyed fragments as if they were arrays.

// Helper for defining the .next, .throw, and .return methods of the

// Helper to call a given function, only once

// Helpers to patch console.logs to avoid logging during side-effect free

// Here we check to see if the defaultValue has actually changed, avoiding these problems

// Host root, text node or just invalid type.

// HostRoot back. To get to the HostRoot, you need to pass a child of it.

// Hot reloading is disabled.

// However, `act` uses `batchedUpdates`, so there's no way to distinguish

// However, since the HostRoot starts out with an alternate it might

// However, since we're going to remain on the fallback, we no longer want

// However, the "included" lanes could be mutated in between updates in the

// However, we already warn about bad casing elsewhere.

// However, we can't just call getRootHostContext() and push it because

// I.e. if we had null values before, then we want to defer this

// ID so client and server IDs match and throws to rerender.

// IE 11 parses & normalizes the style attribute as opposed to other

// IE 11 uses modern selection, but doesn't support the extend method.

// IE 8 has a broken Object.defineProperty that only works on DOM objects.

// IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)

// IE does not have innerHTML for SVG nodes, so instead we inject the

// IE fires the `keypress` event when a user types an emoji via

// IE specific).

// IE. This event does not support bubbling or cancelling, and

// IE8 does not implement `charCode`, but `keyCode` has the correct value.

// IE9 claims to support the input event but fails to trigger it when

// INFORMATION SEPARATOR ONE, inclusive:

// Ideally this should reset to previous but this shouldn't be called in

// If A is deeper, crawl up.

// If B is deeper, crawl up.

// If React sees the exact same element reference as last time, it bails out of re-rendering

// If Scheduler runs in a non-DOM environment, it falls back to a naive

// If `outerNode` has children, this is always the second time visiting

// If `rootNode.form` was non-null, then we could try `form.elements`,

// If `variable` is not specified wrap a with-statement around the generated

// If a component has string refs, we will assign a different object later.

// If a component throws an error, we replay it again in a synchronously

// If a controlled event was fired, we may need to restore the state of

// If a paste event occurs after a keypress, throw out the input

// If a rejected Promise was yielded, throw the rejection back

// If a scheduler task throws, exit the current browser task so the

// If additional passive effects were scheduled, increment a counter. If this

// If all lanes have pending work, look for a lane that isn't currently

// If all the default lanes are already being worked on, look for a

// If an SVG prop is supplied with bad casing, it will

// If an error occurred during hydration,

// If an exception is thrown from innerFn, we leave state ===

// If an update was already in progress, we should schedule an Update

// If any of the inputs to useMutableSource change, reading is potentially unsafe.

// If attribute type is boolean, we know for sure it won't be an execution sink

// If both copies of the parent fiber point to the same child, we can

// If change and propertychange bubbled, we'd just bind to it like all the

// If changes to the hydrated node need to be applied at the

// If completing this work spawned new work, do that next. We'll come

// If componentDidCatch is the only error boundary method defined,

// If composition event is available, we extract a string only at

// If console.error is overridden, or logCapturedError() shows a dialog that throws,

// If context.method was "throw" but the delegate handled the

// If controlled, assign the value attribute to the current value on blur

// If document doesn't exist we know for sure we will crash in this method

// If either the source or the subscription have changed we can't can't trust the update queue.

// If enqueue has been called before, then we want to wait until

// If everything is being worked on, pick any lane. This has the

// If it is not host node and, we might have a host node inside it.

// If it was the primary children that just suspended, capture and render the

// If it's a spacebar character, assume that we have already handled

// If it's not a container, we check if it's an instance.

// If it's safe to read from this source during the current render,

// If it's the only child, treat the name as if it was wrapped in an array

// If layout work was scheduled, flush it now.

// If maybeInvokeDelegate(context) changed context.method from

// If new component APIs are defined, "unsafe" lifecycles won't be called.

// If no async work was scheduled for this interaction,

// If no characters are being inserted, no BeforeInput event should

// If no event plugins have been injected, we are in a server environment.

// If no state update is scheduled then the boundary will swallow the error.

// If none of the children had any work, that means that none of

// If nothing suspended before and we're rendering the same children,

// If nothing threw a Promise or all the same fallbacks are already showing,

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// If passive option is not supported, then the event will be

// If props or context changed, mark the fiber as having performed work.

// If pure is true, the selector returned by selectorFactory will memoize its results,

// If shouldComponentUpdate returned false, we should still update the

// If something asked for a stack inside a fake render, it should get ignored.

// If something inside a portal is clicked, that click should bubble

// If something threw an error, try rendering one more time. We'll render

// If something throws, leave the remaining callbacks on the queue.

// If something was in fallback state last time, and we have all the

// If that inner render function is different, we'll build a new forwardRef type.

// If the boundary is outside of blocking mode, we should *not*

// If the child props _did_ change (or we caught an error), this wrapper component needs to re-render

// If the child props haven't changed, nothing to do here - cascade the subscription update

// If the delegate iterator has a return method, give it a

// If the direct event target isn't a React owned DOM node, we need to look

// If the discrete updates scheduled passive effects, flush them now so that

// If the dispatched exception was caught by a catch block,

// If the event can be delegated (or is capture phase), we can

// If the getSnapshot function changed, we also shouldn't rely on the update queue.

// If the instance does not exist yet, we will push null at first,

// If the left or right node is smaller, swap with the smaller of those.

// If the listener entry is empty or we should upgrade, then

// If the new child is undefined, and the return fiber is a composite

// If the object is an opaque reference ID, it's expected that

// If the prop isn't in the special list, treat it as a simple attribute.

// If the render was from a store update, clear out that reference and cascade the subscriber update

// If the root is not a host container, we're in a disconnected tree. I.e.

// If the root or lanes have changed, throw out the existing stack

// If the source mutated between render and now,

// If the subscriber throws, rethrow it in a separate task

// If the tail is hidden there might not be an Suspense boundaries

// If the target node is part of a hydrated or not yet rendered subtree, then

// If the text differs, mark it as an update. All the work in done in commitWork.

// If the top level item is an array, we treat it as a set of children,

// If the update payload indicates that there is a change or if there

// If the value is an error, call this function immediately after it is thrown

// If there *are* pending mutations, we may still be able to safely read

// If there are higher priority lanes, we'll include them even if they

// If there are no passive effects, then we can complete the pending interactions.

// If there are no pending mutations, then `root.mutableReadLanes` will be

// If there are passive effects, schedule a callback to flush at

// If there are pending passive effects unmounts for this Fiber,

// If there is a ref on a host node we need to schedule a callback

// If there is more work to do in this returnFiber, do that next.

// If there is no alternate, then we only need to check if it is mounted.

// If there is no alternate, this might be a new tree that isn't inserted

// If there's a current queue, and it's different from the base queue, then

// If there's ambiguity due to batching it's resolved in preference of:

// If there's more work, schedule the next message event at the end

// If there's no match, maybe there will be one further down in the child tree.

// If there's no parent, we're at the root.

// If there's no remaining work, we can clear the set of already failed

// If there's no version, then this is the first time we've read from the

// If there's still work at the current priority,

// If they don't match there's a potential tear and a full deopt render is required.

// If they were previously forced into fallbacks, they may now be able

// If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,

// If this boundary has already errored, then we had trouble processing

// If this boundary just timed out, schedule an effect to attach a

// If this boundary just timed out, then it will have a set of wakeables.

// If this doesn't spawn new work, complete the current work.

// If this happens during a replay something went wrong and it might block

// If this is a controlled radio button group, forcing the input that

// If this is a fresh new component that hasn't been rendered yet, we

// If this is a newly suspended tree, it might not get committed as

// If this is a plain function component without default props,

// If this is an aria-* attribute, but is not listed in the known DOM

// If this is an initial render of a new tree of Suspense boundaries and

// If this is an over event with a target, we might have already dispatched

// If this subtreee is running in blocking mode we can suspend,

// If this update was processed eagerly, and its reducer matches the

// If this was a boolean, it doesn't matter what the value is

// If this was the last scheduled async work for any of them,

// If we already have a queue of discrete events, and this is another discrete

// If we already suspended with a delay, then interrupting is fine. Don't

// If we are currently composing (IME) and using a fallback to do so,

// If we are currently inside another batch, we need to wait until it

// If we are only accumulating events for the target, then we don't

// If we are using the legacy FB support flag, we

// If we aren't running in "pure" mode, we don't want to memoize values.

// If we can't hydrate this instance let's try the next one.

// If we captured an error, but getDerivedStateFromError is not defined,

// If we didn't find any host children, fallback to closest host parent.

// If we didn't find anything, let's try the next sibling.

// If we didn't hit the root, that means that we're in an disconnected tree

// If we don't find a Fiber on the comment, it might be because

// If we don't have a child, try the siblings instead.

// If we don't have any more existing children we can choose a fast path

// If we don't use mutation we drill down into portals here instead.

// If we encounter useOpaqueReference's opaque object, this means we are hydrating.

// If we find that "rootContainer", we find the parent fiber

// If we get an event (ex: img onload) before committing that

// If we get updated because one of our children updated, we don't

// If we got a new source or subscribe function, re-subscribe in a passive effect.

// If we had a single constructor, it would be megamorphic and engines would deopt.

// If we had additional state updates during this life-cycle, let's

// If we have a mismatch, it might be caused by that.

// If we have already queued this exact event, then it's because

// If we have an alternate, that means this is an update and we need

// If we have an alternate, that means this is an update and we need to

// If we have any remaining hydratable nodes, we need to delete them now.

// If we have new child props, and the same wrapper props, we know we should use the new child props as-is.

// If we have two possible branches, we'll walk backwards up to the root

// If we haven't fully disabled javascript: URLs, and if

// If we hit a "Delayed" case, such as when we'd switch from content back into

// If we hydrated, then we'll need to schedule an update for

// If we pop out of the root or hit the parent the fiber we are the

// If we previously forced a fallback, we need to schedule work

// If we the instance doesn't have any children, then there can't be

// If we unwrapped and compared the inner types for wrappers instead,

// If we use mutation we drill down into portals using commitUnmount above.

// If we wait for this file to be fully written, cancel the wait.

// If we're about to return the first line, and the control is also on the same

// If we're already in the middle of a render, switching lanes will interrupt

// If we're already showing a fallback and it gets "retried", allowing us to show

// If we're already showing a fallback, there are cases where we need to

// If we're currently hydrating, try to hydrate this boundary.

// If we're in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.

// If we're not currently hydrating but we're in a hydration context, then

// If we're not subscribed to the store, nothing to do here

// If we're recovering from an error, reconcile without reusing any of

// If we're suspended with delay, or if it's a retry, we'll always suspend

// If we're switching from a direct text child to a normal child, or to

// If we've accumulated a substantial number of paths that

// If you call unmountComponentAtNode twice in quick succession, you'll

// Ignore it and don't print the stack addendum.

// Ignore non-index properties.

// Ignore the finally entry if control is not jumping to a

// Ignore.

// Implicit key determined by the index in the set

// Important!

// In Chrome, assigning defaultValue to certain input types triggers input validation.

// In DEV mode, we swap out invokeGuardedCallback for a special version

// In DEV, include code for a common special case:

// In Fiber this, is just the state node right now. We assume it will be

// In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the

// In IE9+, we have access to composition events, but the data supplied

// In IE9, propertychange fires for most input events but is buggy and

// In PROD (or in packages without access to React internals),

// In React, we let users pass `true` and `false` even though technically

// In V8, the first line is describing the message but other VMs don't.

// In a resume, we'll already have an instance we can reuse.

// In both cases, we need to throw away pending updates (since they are no longer relevant)

// In eager mode, we attach capture listeners early, so we need

// In either case, we don't want to call the event handler if the value

// In legacy mode, SuspenseList doesn't work so we just

// In legacy mode, we commit the primary tree as if it successfully

// In legacy sync mode, don't defer the subtree. Render it now.

// In order to capture, the Suspense component must have a fallback prop.

// In order to support react-lifecycles-compat polyfilled components,

// In profiling mode, resetChildExpirationTime is also used to reset

// In such a case, we directly return the `char` property instead of

// In tests, we want to enforce a mocked scheduler.

// In that case, if the source is mutated between the first and second renderer,

// In that case, throw the error from here so it doesn't get lost.

// In the initial pass we might need to construct the instance.

// In the middle of an update, it is possible to have multiple checked.

// In the second pass, we mount the new children. The trick here is that we

// In this case we should still schedule an update with React.

// In this case, call the opaque object's toString function which generates a new client

// In which case– leave pending interactions until the subsequent render.

// Include the time spent working on failed children before continuing.

// Increase its priority.

// Increase the priority of this boundary to unblock

// Increases the priority of thennables when they resolve within this boundary.

// Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

// Initial mount

// Initial mount should not be batched.

// Initialize with proper watcher.

// Initializing the fields below to smis and later updating them with

// Inject data generated from fallback path into the synthetic event.

// Inner memo component props aren't currently validated in createElement.

// Inner propTypes will be validated in the function component path.

// Inner props are checked in the reconciler.

// Inner props for memo are validated later.

// Insert

// Instance

// Instantiate twice to help detect side-effects.

// Instead of committing the fallback immediately, wait for more data

// Instead of mutating we could clone the event.

// Intentional fallthrough

// Intentionally camelCase

// Intentionally create event lazily.

// Intentionally fall through to the next case, which handles both

// Intentionally not named imports because Rollup would use dynamic dispatch for

// Intentionally pushing one by one.

// Intentionally unsound. Pending updates form a circular list, but we

// Intentionally use the original name.

// Interaction threads are unique per root and expiration time.

// Interactions "stack"–

// Internal invariant that should never happen, but feasibly could in

// Invalid dates are coerced to `NaN`.

// Invoke the function an extra time to help detect side-effects.

// Invoke the leading edge.

// Invokes the mount life-cycles on a previously never rendered instance.

// Invokes the update life-cycles and returns false if it shouldn't rerender.

// It also can turn \u0000 into \uFFFD inside attributes.

// It has only been added in Fiber to match the (unintentional) behavior in Stack.

// It is handled by React separately and shouldn't be written to the DOM.

// It is important to unwind the context in the reverse order.

// It may be required if the current component is an error boundary,

// It returns false if the boundary is already hidden.

// It will get deleted.

// It's also safe to do for updates too, because current.child would only be null

// It's important that ALL pending passive effect destroy functions are called

// It's okay to replace the initial doubles with smis after initialization.

// It's possible that the underlying source was mutated between the when the last "change" event fired,

// It's possible that we caught an error due to a bad mapState function, but the

// It's safe to read if the store hasn't been mutated since the last time

// It's still possible that we'll need to rebase this update later,

// It's unlikely their type would change as usually you define them inline.

// Iterate through the list of updates to compute the result.

// Iterator interface in terms of a single ._invoke method.

// Iterator will provide entry [k,v] tuples rather than values.

// Its effect list is no longer valid.

// Just set it using the onclick property so that we don't have to manage any

// Keep both the (mapped) and old keys if they differ, just as

// Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.

// Keep rendering in a loop for as long as render phase updates continue to

// Keep scanning and use the map to restore deleted items as moves.

// Keep this check inline so it only runs on the false path:

// Keep this code in sync with handleError; any changes here must have

// Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

// KeyPress is deprecated, but its replacement is not yet final and not

// Known attributes should match the casing specified in the property config.

// Latin Extended-A block.

// Latin-1 Supplement block.

// Launch stream with one parent, the root dir.

// Layout effects have the same constraint.

// Lazy component props can't be validated in createElement

// Lazy may contain any component type so we recursively resolve it.

// Learn more about this here:

// Legacy Interface

// Legacy `process.binding('util')` for Node.js < 10.

// Legacy hook: remove it

// Let the ARIA attribute hook validate ARIA attributes

// Let's get the fiber associated with the SuspenseComponent

// Let's try everything again

// Leverage the exponentiation by squaring algorithm for a faster repeat.

// List of events that need to be individually attached to media elements.

// Listener(s) to notify when interactions begin and end.

// Live Region Attributes

// Load entry module

// Loop through the updates and clone them.

// Make `instanceof Error` still work for returned errors.

// Make sure such renderers get scheduled for later work.

// Make sure we're on the second pass, i.e. the primary child fragment was

// Map minified method names to their real names.

// Mark any Suspense boundaries with fallbacks as having work to do.

// Mark anything that was blocked on this as no longer blocked

// Mark each child as hydrating. This is a fast path to know whether this

// Mark imbalanced braces and brackets as invalid

// Mark that the fiber performed work, but only if the new state is

// Mark that the root has a pending update.

// Mark the current commit time to be shared by all Profilers in this

// Mark the current render as suspended so that we switch to working on

// Mark the parent fiber as incomplete and clear its effect list.

// Mark the updated lanes on the list, too.

// Mark them as completed.

// Mark this subtree context as having at least one invisible parent that could

// Match production behavior more closely:

// Match! Schedule an update on this fiber.

// Math.pow(2, 30) - 1

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.

// Maybe the source changed in a way that the old subscription ignored but the new one depends on.

// Meaning that newly traced interactions are appended to the previously active set.

// Memo may contain any component type so we recursively resolve it.

// Memoize state using the values we just used to render.

// Memoize the check that determines which context instance we should use.

// Memoize using the boundary fiber to prevent redundant listeners.

// Memoize using the thread ID to prevent redundant listeners.

// Memory management.

// Merge parent and own context.

// Merge the partial state and the previous state.

// Merge the pending queue and the base queue.

// Microdata

// Mimic the constructor's `return` behavior.

// Mobile Safari does not fire properly bubble click events on

// Mode, SuspenseList can also trigger this scenario, but this is a legacy-

// Modern event system doesn't use pooling.

// Mount

// Move based on index

// Moved outside to ensure DCE works with this flag

// Moving from `node` to its first child `next`.

// Moving from `node` to its next sibling `next`.

// Moving to a node from outside the window.

// Must not discard the (non-)printable Enter-key.

// Mutation mode

// NOTE: Intentionally unsound cast. All that matters is that it's a number

// NOTE: This only applies to SimpleMemoComponent, not MemoComponent,

// NOTE: We cannot mutate the deferred array itself as all clones

// Native Symbol.

// Need to check if the tree still needs to be deferred. This is

// Needed because Blocks store data on type.

// Needs a placement effect because the parent (the Suspense boundary) already

// Neither alternate was updated, which means the rest of the

// Neither child is smaller. Exit.

// Never force flush in production. This function should get stripped out.

// New behavior only for users of `prop-types` package

// New rows can't be content rows.

// Next replay any continuous events.

// Next we find the first one that isn't the same which should be the

// Next we need to figure out if the node that skipped past is

// Next we'll drill down this component to find the first HostComponent/Text.

// Next we're going to render the tail.

// Next we're simply going to delete all insertions after the

// No DevTools

// No boundary was found. Fallthrough to error mode.

// No change

// No change. Bailout early if children are the same.

// No child. Traverse to next sibling.

// No effects.

// No implementation differences.

// No more siblings. Traverse up.

// No need to subscribe a static component to theme changes, it won't change anything

// No operation performed.

// No special behavior since these rules fall back to "in body" mode for

// Node.js 0.10 has enumerable non-index properties on buffers.

// Non `Object` object instances with different constructors are not equal.

// Non-alphabetic chars.

// Noop.

// Normalize SVG <use> element events #4963

// Normalize inconsistent values reported by browsers due to

// Normalize the directory name on Windows

// Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`

// Normally portals handle their own events all the way down to the root.

// Normally the dispatch function for a state hook never changes,

// Normally we'd only need to check one of the fibers because if it

// Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug

// Not currently showing content. Consult the Suspense context.

// Not indenting methods for history sake; for now.

// Not sure about the optimal order of these conditions:

// Note that simple async functions are implemented on top of

// Note that the "rows" will be workInProgress, but any nested children

// Note that this only happens when part of the tree is rendered

// Note that this will happen even if batchedUpdates is higher up

// Note that this would throw on non-element objects.

// Note that we apply entanglements *after* checking for partial work above.

// Note that we do this because on renders _not_ caused by store updates, we need the latest store state

// Note the use of `==` which checks for null or undefined.

// Note: During these life-cycles, instance.props/instance.state are what

// Note: It doesn't matter whether the component that suspended was

// Note: Memo only checks outer props here.

// Note: The following is done to avoid a v8 performance cliff.

// Note: These happen to have identical begin phases, for now. We shouldn't hold

// Note: This currently assumes there are no passive effects on the root fiber

// Note: We don't reset the actualTime counts. It's useful to accumulate

// Note: ["return"] must be used for ES3 parsing compatibility.

// Note: `option.selected` is not updated if `select.multiple` is

// Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.

// Note: memo() and forwardRef() we'll compare outer rather than inner type.

// Note: there is a special case that prevents it from being written to the DOM

// Note: these two variables *must* always be updated together.

// Note: we cannot null out sibling here, otherwise it can cause issues

// Nothing to do for these component types

// Nothing to do here. This is terminal. We'll do the completion step

// Nothing to hydrate. Make it an insertion.

// Noticeable Difference.

// Notify subscribers that it's completed.

// Now flush the immediate queue.

// Now push the new context and mark that it has changed.

// Now that all that's done, we can finally try to actually render the child component.

// Now that we know this function doesn't throw, replace it.

// Now that we've validated casing, do not validate

// Now we need to find it's corresponding host fiber in the other

// Null out the callback to indicate the task has been canceled. (Can't

// OK, the next part is confusing. We're about to reconcile the Suspense

// Observe all updates.

// Offscreen doesn't have the first render pass).

// Old behavior for people using React.PropTypes

// Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support

// On some platforms, in particular some releases of Android 4.x,

// On the selectionchange event, the target is just document which isn't

// Once the update queue is empty, persist the derived state onto the

// Only bother fetching default value if we're going to use it

// Only decrement the outstanding interaction counts once.

// Only decrement the pending interaction count if we're done.

// Only fire when selection has actually changed.

// Only invoke if we have `lastArgs` which means `func` has been

// Only log here if componentDidCatch is the only error boundary method defined

// Only monitor this failure once because there tends to be a lot of the

// Only reset the updates from the queue if it has a clone. If it does

// Only set node.value if textContent is equal to the expected

// Only true when this component is being hot reloaded.

// Only updates at user-blocking priority or greater are considered

// Only upgrade once. This works even inside the render phase because

// Only warn for user-defined components, not internal ones like Suspense.

// Or it may be because it's older React where they're the same thing.

// Original props are copied

// Other platforms use non-polling fs_watch.

// Otherwise B has to be current branch.

// Otherwise effects in sibling components might interfere with each other.

// Otherwise reset hydration state in case we aborted and resumed another

// Otherwise, put this component's subscription instance into context, so that

// Otherwise, return to the parent

// Otherwise, the value attribute is synchronized to the property,

// Otherwise, we'll wait until after the passive effects are flushed.

// Otherwise, we're going to have to hide content so we should

// Our heuristic for that is whenever we enter a concurrent work loop.

// Our re-subscribe logic only runs when the store/subscription setup changes

// Parse the HTML and read it back to normalize the HTML string so that it

// Partial state object

// Perform the `toStringTag` check first to avoid errors with some

// Perform work until Scheduler asks us to yield

// PhantomJS 2 has enumerable non-index properties on typed arrays.

// Placement

// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'

// Pop a row.

// Pop provider fiber

// Portal will bubble through to us.

// Portals are special because we don't append the children during mount

// Prefix to avoid chaos with special keys.

// Prevent bailout if the implementation changed due to hot reload.

// Prevent re-entrancy.

// Priority is insufficient. Skip this update. If this is the first

// Probably in the "in body" parsing mode, so we outlaw only tag combos

// Proceed under the assumption that this is a class instance

// Proceed under the assumption that this is a function component

// Process this update.

// Promote the fiber to a class and try rendering again.

// Prop type validation may throw. In case they do, we don't want to

// Propagate any mapState/mapDispatch errors upwards

// Props should take precedence over ThemeProvider, which should take precedence over

// Protect against re-entrancy.

// Provide explicit error message when production+profiling bundle of e.g.

// Provide the compiled function's source by its `toString` method or

// Public methods

// Pull data from the store after first render in case the store has

// Push context providers early to prevent context stack mismatches.

// Push current root instance onto the stack;

// Push onto existing queue. Don't need to schedule a callback because

// Push this callback into an internal queue. We'll flush these either in

// Queue the event to be replayed later. Abort dispatching since we

// Rather than returning an object with a next method, we keep

// Re-create this selector whenever the store changes.

// React DevTools reads this flag.

// React Refresh

// React currently throws a warning when using useLayoutEffect on the server.

// React nodes in the future. We need to check this first because

// React uses these fields to store the result.

// React v16.11 and below

// React v16.12 and above

// React$ElementType

// ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,

// ReactFiberContext usually updates this cache but can't for newly-created instances.

// Read this again, since an effect might have updated it

// Received a ping at the same priority level at which we're currently

// Record a pending mutable source update with the same expiration time.

// Record the characters to be added to the DOM.

// Record the component responsible for creating this element.

// Record the render duration for the fiber that errored.

// Record the time spent rendering before an error was thrown. This

// Recursively compare arrays (susceptible to call stack limits).

// Recursively compare objects (susceptible to call stack limits).

// Recursively convert values (susceptible to call stack limits).

// Recursively delete all host nodes from the parent.

// Recursively flatten arrays (susceptible to call stack limits).

// Recursively merge objects and arrays (susceptible to call stack limits).

// Recursively populate clone (susceptible to call stack limits).

// Recursively remove children directories / files.

// Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416

// Refs should update even if shouldComponentUpdate returns false

// Regardless of whether this script is executing as a CommonJS module

// Register pending interactions on the root to avoid losing traced interaction data.

// Regular boundaries always capture.

// Relationship Attributes

// Relies on `updateStylesByID` not mutating `styleUpdates`.

// Remaining cases are all treated as empty.

// Remaining properties are added to a new props object

// Remaining timers are pending.

// Remember the parent context so we can merge with it later.

// Remove any effects that were appended after this point.

// Remove nextEffect pointer to assist GC

// Remove our event listeners

// Removes this instance's listeners and closes the underlying fs_watchFile

// Renderers may schedule work to be done after host components are mounted

// Rendering at offscreen, so we can clear the base lanes.

// Replace delimiters with snippets.

// Replace globs with equivalent patterns to reduce parsing time.

// Replace the child/sibling pointers above it.

// Replace the old (or empty) context with the new one.

// Represents whether effect should fire.

// Rerender

// Rerender the whole list, but this time, we'll force fallbacks

// Reserved names are extracted

// Reset a workInProgress child set to prepare it for a second pass.

// Reset any `maxWait` timer.

// Reset effect durations for the next eventual effect phase.

// Reset module-level state that was set during the render phase.

// Reset the child fibers to their original state.

// Reset the durations from the first pass so they aren't included in the

// Reset the effect list before doing the second pass since that's now invalid.

// Reset the effect list to what it was before we rendered this

// Reset the effect tag but keep any Placement tags, since that's something

// Reset the effect tag.

// Reset the memoizedState to what it was before we attempted

// Reset the profiler timer.

// Reset the text content of the parent before doing any insertions

// Reset the work-in-progress list

// Reset this to null before calling lifecycles

// Reset to createFiber's initial values.

// Reset to the "together" mode in case we've started a different

// Reset to the cloned values that createWorkInProgress would've.

// Resets the replaying for this type of continuous event to no event.

// Resetting context._sent for legacy support of Babel's

// Resolve default props

// Resolve default props. Taken from ReactElement

// Resolved (SimpleMemoComponent has no defaultProps)

// Resolved for outer only

// Resolved props

// Restart from the root.

// Restart the timer.

// Restart work from the new fiber.

// Restarting too aggressively is also not good because it starves out any

// Restore the context.

// Restore the original properties of the fiber.

// Resume execution at the desired location (see delegateYield).

// Resume flushing in the next tick

// Retaining it forever may interfere with GC.

// Rethrow this error instead of the original one.

// Retry if any event replaying was blocked on this.

// RetryLane even if it's the one currently rendering since we're leaving

// Return an iterator with no values.

// Return the exports of the module

// Return the line we found.

// Return to the normal work loop.

// Return whether there's additional work

// Returns a string that is postfixed to a warning about an invalid type.

// Returns class name of the object, if any.

// Returns the SuspenseInstance if this node is a direct child of a

// Returns whether passive effects were flushed.

// Reuse previous dependencies

// Revert the select back to its default unselected state.

// Run beginWork again.

// Run these checks in production only if the flag is off.

// SUSPENSE_x_START_DATA. Otherwise, null.

// SVG

// SVG-related properties

// Safari 9 has enumerable `arguments.length` in strict mode.

// Safari may fire events on text nodes (Node.TEXT_NODE is 3).

// Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:

// Safe because if current fiber exists, we are reconciling,

// Same as above

// SameValue algorithm

// Save references to the new child props.  Note that we track the "child props from store update"

// Schedule a Ref effect

// Schedule a callback to attempt replaying as many events as are

// Schedule a discrete update but only if it's not Sync.

// Schedule a force update on the work-in-progress.

// Schedule a host callback, if needed. If we're already performing work,

// Schedule a new callback.

// Schedule a placeholder to display after a short delay, using the Just

// Schedule a timeout.

// Schedule an effect to clear this container at the start of the next commit.

// Schedule other updates after in case the callback is sync.

// Schedule the nearest Suspense to re-render the timed out view.

// Schedule this fiber to re-render at offscreen priority. Then bailout.

// Search parent A's child set

// Search parent B's child set

// Second is hydration. During hydration, the Suspense fiber has a slightly

// Second pass: Create new passive effects.

// Secondary renderers store their context values on separate fields.

// See [MDN](https://mdn.io/round#Examples) for more details.

// See `createPrimitiveTypeChecker`.

// See `requestUpdateLane` for explanation of `currentEventWipLanes`

// See discussion in https://github.com/facebook/react/pull/10676.

// See discussion in https://github.com/facebook/react/pull/6896

// See http://requirejs.org/docs/errors.html#mismatch for more details.

// See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.

// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.

// See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.

// See https://es5.github.io/#x13.2.2 for more details.

// See https://github.com/facebook/react/issues/11807

// See https://github.com/facebook/react/issues/12995

// See https://github.com/facebook/react/issues/13222

// See https://github.com/facebook/react/pull/19216.

// See https://github.com/facebook/regenerator/issues/274 for more details.

// See rules for 'li', 'dd', 'dt' start tags in

// See the discussion in https://github.com/facebook/react/pull/11157.

// Seems redundant, but it changes the type from a single lane (used for

// Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.

// Set `workInProgress` to null. This represents advancing to the next

// Set of currently traced interactions.

// Set the dispatcher in DEV because this might be call in the render function

// Set the remaining expiration time to be whatever is remaining in the queue.

// Set the return pointer of the child to the work-in-progress fiber.

// Set the return pointer of the sibling to the work-in-progress fiber.

// Set up default options.

// Set up refs to coordinate values between the subscription effect and the render logic

// Set up the Suspense Context to force suspense and immediately

// Set when currying a bound function.

// Setting a size greater than 1 causes a select to behave like `multiple=true`, where

// Setting context._sent for legacy support of Babel's

// Shallow cloning props works as a workaround for now to bypass the bailout check.

// Shift down to normal priority

// Shift with exponential notation to avoid floating-point issues.

// Shim for React DOM 16.0.0 which still destructured (but not used) this.

// Shorthands for all valid HTML Elements

// Should always be set

// Should be handled by findRetryLane instead

// Should be handled by findTransitionLane instead

// Should this check be gated by parent namespace? Not sure we want to

// Silently steal the ref from the parent.

// SimpleMemoComponent codepath doesn't resolve outer props either.

// Since nothing actually suspended, there will nothing to ping this

// Since nothing actually suspended, there will nothing to ping this to

// Since the old fiber is disconnected, we have to schedule it manually.

// Since these are SVG attributes, their attribute names are case-sensitive.

// Since this is conceptually a new fiber, schedule a Placement effect

// Since this wasn't the direct target of the event, we might have

// Since we already found a match, we can stop traversing the

// Since we don't keep a stack of them, we will search for it.

// Since we know we're in a React event, we can clear the current

// Since we yield every frame regardless, `requestPaint` has no effect.

// Since we're not hidden anymore, reset the state

// Since we're restarting, remove anything that is not a host effect

// Skip both NoWork and PerformedWork tags when creating the effect

// Skip index properties.

// Skip key warning if the type isn't valid since our key validation logic

// Skip non-hydratable nodes.

// Skip past all nodes within this suspense boundary.

// Skip portals because commitUnmount() currently visits them recursively.

// Skip the primary children, and continue working on the

// Skip this if we're not updating due to sCU.

// Skipping one frame that we assume is the frame that calls the two.

// So if there are interleaved updates, they get pushed to the older queue.

// So we can clear these now to allow a new callback to be scheduled.

// So we can't tell if the event name is correct for sure, but we can filter

// So we preemptively throw with a better message instead.

// So we push an empty value first. This lets us safely unwind on errors.

// So we should be able to stop now. However, we don't know if this portal

// So we'll skip the misleading extra mismatch warning in this case.

// So we'll throw out the current work and restart.

// So, we'll use the child props from store update only if the wrapper props are the same as last time.

// Some environments might not have setTimeout or clearTimeout.

// Some non-printable keys are reported in `charCode`/`keyCode`, discard them.

// Some of these attributes can be hard to find. This list was created by

// Something in the return path also threw.

// Something in this boundary's subtree already suspended. Switch to

// Something might get unblocked by state updates or retries in the

// Something should be setting the props in the constructor.

// Something suspended. Re-render with the fallback children.

// Something went really wrong, and our event was not dispatched.

// Source: https://github.com/garycourt/murmurhash-js/blob/master/murmurhash2_gc.js

// Spec says something about storing a list of markers, but it sounds

// Special case: Sync React callbacks are scheduled on a special

// Special case: There's nothing to work on.

// Special cases

// Stack implementation injected by the current renderer.

// Start over from the beginning of the list

// Start the timer for the trailing edge.

// Stash the eagerly computed state, and the reducer used to compute

// Stash the promise on the boundary fiber. If the boundary times out, we'll

// State object

// Still haven't timed out. Continue rendering the children, like we

// Store the current set of interactions on the FiberRoot for a few reasons:

// Store the unwrapped component in the type.

// Strictly speaking, seeing an <option> doesn't mean we're in a <select>

// String SVG attributes with the xlink namespace.

// String SVG attributes with the xml namespace.

// Submit/reset inputs need the attribute removed completely to avoid

// Support DevTools editable values for useState and useReducer.

// Support DevTools props for function components, forwardRef, memo, host components, etc.

// Support for module components is deprecated and is removed behind a flag.

// Suppress event when fs_stat fails, to avoid sending undefined 'stat'

// Suppress the error. It will throw again in the render phase.

// Suspense Heuristics

// SuspenseInstance. I.e. if its previous sibling is a Comment with

// SuspenseList doesn't actually catch anything. It should've been

// SuspenseList so that it can retry if they resolve.

// Sync the values needed by our subscription handler after each commit.

// Synchronously dispatch our fake event. If the user-provided function

// THIS FILE IS AUTO GENERATED

// TODO

// TODO (bvaughn) Replace this behavior with an invariant() in the future.

// TODO Clear this data once all pending hydration work is finished.

// TODO Ignore this error? Rethrow it?

// TODO This is only a temporary bandaid for the old reconciler fork.

// TODO We're reading the store directly in render() here. Bad idea?

// TODO: Add more comments

// TODO: Because we don't have a work-in-progress, this will add the

// TODO: Better heuristic.

// TODO: Clean this up once we turn on the string ref warning for

// TODO: Consider calling `unwindWork` to pop the contexts.

// TODO: Consider not doing this for input and textarea.

// TODO: Consider unifying this with how the root works.

// TODO: Consider warning about bad polyfills

// TODO: Consider warning in this path if a fallback timer is not scheduled.

// TODO: Defer siblings if we're not at the right index for this slot.

// TODO: Disabled elements should not respond to mouse events

// TODO: Distinguish by namespace here -- for <title>, including it here

// TODO: Does this work for all element types? What about MathML? Should we

// TODO: Don't need to accumulate this. Instead, we can remove

// TODO: Don't need to accumulate this. Instead, we can remove renderLanes

// TODO: Drop this when these are no longer allowed as the type argument.

// TODO: Ensure that an update gets scheduled if any of the special props

// TODO: Expiration heuristic is constant per lane, so could use a map.

// TODO: Figure out what we should do in Blocking mode.

// TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.

// TODO: Find a more efficient way to do this.

// TODO: For the shouldClone case, this could be micro-optimized a bit by

// TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.

// TODO: Handle wasCustomComponentTag

// TODO: I found and added this missing line while investigating a

// TODO: I think this is now always non-null by the time it reaches the

// TODO: If deps are provided, should we skip comparing the ref itself?

// TODO: If key === null and child.key === null, then this only applies to

// TODO: If this is a HostRoot we might want to bail out.

// TODO: If this is the first discrete event in the queue. Schedule an increased

// TODO: If we're rendering sync either due to Sync, Batched or expired,

// TODO: If workInProgress.child is null, we can continue on the tail immediately.

// TODO: Is the JND optimization worth the added complexity? If this is

// TODO: Lol maybe there's a better way to factor this besides this

// TODO: Make sure that we check isMounted before firing any of these events.

// TODO: Make sure this doesn't override pings that happen while we've

// TODO: Make sure we check if this is still unmounted or do any clean

// TODO: Might be better if `flushPassiveEffects` did not automatically

// TODO: Move createInstance to beginWork and keep it on a context

// TODO: Move out of the loop. This only happens for the first run.

// TODO: Move the reset at in beginWork out of the common path so that

// TODO: Move this and createInstance step into the beginPhase

// TODO: Move this check out of the hot path by moving `resetChildLanes`

// TODO: Move this out of the hot path using a dedicated effect tag.

// TODO: Not sure if this is the desired semantics, but it's what we

// TODO: Once it's just Fiber we can move this to node._wrapperState

// TODO: Only do this for the relevant Safaris maybe?

// TODO: Only ignore them on controlled tags.

// TODO: Only schedule updates if these values are non equal, i.e. it changed.

// TODO: Pass `current` as argument

// TODO: Possibly defer this until the commit phase where all the events

// TODO: Probably should inline this back

// TODO: Probably should refactor `beginWork` to split the bailout

// TODO: Remove support for `selected` in <option>.

// TODO: Remove this dependency on the Scheduler priority.

// TODO: Reset this somewhere else? Lol legacy mode is so weird.

// TODO: Restructure so we never read values from the instance.

// TODO: Scheduler no longer requires these methods to be polyfilled. But

// TODO: Should be able to flush inside batchedUpdates, but not inside `act`.

// TODO: Should not remove render lanes that were pinged during this render

// TODO: Should probably move the bulk of this function to commitWork.

// TODO: Should warn in effects and callbacks, too

// TODO: Should we use domElement.firstChild.nodeValue to compare?

// TODO: Special case idle priority?

// TODO: Split the update API as separate for the props vs. children.

// TODO: Strange thing: "should not choke on an ignored watch path" will be failed without 2 ready calls -__-

// TODO: Temporary. We're removing the concept of discrete updates.

// TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.

// TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.

// TODO: The Profiler fiber shouldn't have a type. It has a tag.

// TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.

// TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.

// TODO: Theoretically, any update to any lane can unblock any other lane. But

// TODO: These should not need a type.

// TODO: This assumes that we're about to evaluate the component and process

// TODO: This breaks on empty slots like null children. That's

// TODO: This cast may not be sound for SVG, MathML or custom elements.

// TODO: This function shares a lot of logic with attemptToDispatchEvent.

// TODO: This gets called every time we yield. We can optimize by storing

// TODO: This is related to `act`, not events. Move to separate key?

// TODO: This prevents the assignment of defaultValue to regular

// TODO: This will still suspend a synchronous tree if anything

// TODO: Type this specific to this type of component.

// TODO: Upgrade this definition once we're on a newer version of Flow that

// TODO: Use an effect tag.

// TODO: Use invariant so the message is stripped in prod?

// TODO: Use symbols?

// TODO: Warn if _enabled is false.

// TODO: Warn if there is more than a single textNode as a child.

// TODO: Warn in a future release.

// TODO: Warn in strict mode if getDerivedStateFromError is

// TODO: Warn, we didn't find the end comment boundary.

// TODO: Warn.

// TODO: We can probably just avoid popping it instead and only

// TODO: We could fast path by just rendering the tail now.

// TODO: We should probably always mark the root as suspended immediately

// TODO: Without `any` type, Flow says "Property cannot be accessed on any

// TODO: add a more generic warning for invalid values.

// TODO: can we stop exporting these?

// TODO: figure out the API for cross-renderer implementation.

// TODO: findDOMNode doesn't rely on this any more but isMounted does

// TODO: ideally, we'd eventually add all events from

// TODO: ideally, we'd eventually apply the same logic to all

// TODO: if it was but can no longer be simple,

// TODO: overwrite in-place instead of remove+create?

// TODO: pass ReactDOM portal implementation as third argument

// TODO: popHydrationState

// TODO: real check

// TODO: remove in React 17.0.

// TODO: remove top-level side effect.

// TODO: replaying capture phase events is currently broken

// TODO: requestUpdateLanePriority also reads the priority. Pass the

// TODO: revisit this when we implement resuming.

// TODO: this is special because it gets imported during build.

// TODO: this seems like it could cause a DEV-only throw for hydration

// TODO: throw or warn if we couldn't hydrate?

// TODO: we can remove these if Rollup fixes the bug.

// TODO: we should remove the concept of a "SimpleEventPlugin".

// TODO: why is this nullable in the types but we read from it?

// Tab or newline are defined as \r\n\t:

// Tag is either LegacyRoot or Concurrent Root

// Tag the fiber with an update effect. This turns a Placement into

// Taken from https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/dangerousStyleValue.js

// Tell Scheduler to yield at the end of the frame, so the browser has an

// Test for A's keys different from B.

// Text nodes don't have keys. If the previous node is implicitly keyed

// Thanks to ReactDOMFactories for this handy list!

// That happens in the completeWork phase without going back to beginWork.

// That indicates that we are waiting for suspense data.

// That is depending on if we want nested subtrees (layers) to bubble

// That would cause this tear check to throw again and eventually be visible to the user.

// That's probably okay; we don't support it just as we don't support

// The ._invoke method unifies the implementations of the .next,

// The ChangeEventPlugin registers a "propertychange" event for

// The Entry will either be a directory that just got removed

// The JS engine embedded in Adobe products needs `match` returned in

// The Suspense Context is split into two parts. The lower bits is

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol

// The `start` method can be stored on a ref, since `setPending`

// The actual logic for this is spread out in different places.

// The actual meaning of the value depends on the users' keyboard layout

// The algorithm for assigning an update to a lane should be stable for all

// The alternative is to track the namespace in a few places which is convoluted.

// The assumption is that this is usually faster.

// The attribute name is case-sensitive in SVG so we can't just use

// The below logic attempts to work out if we need to change

// The boundary fiber (a Suspense component or SuspenseList component)

// The callback errored, but the error event never fired.

// The child props selector needs the store reference as an input.

// The commit phase is broken into several sub-phases. We do a separate pass

// The context might have changed so we need to recalculate it.

// The context value changed. Search for matching consumers and schedule

// The context.catch method must only be called with a location

// The current composition is stored statically and must not be

// The current task was canceled. Exit. We don't need to call

// The current tree is not already showing a fallback.

// The current, flushed, state of this fiber is the alternate. Ideally

// The default reveal order is the same as not having

// The delegate iterator is finished, so forget it and continue with

// The effect list is no longer valid.

// The effect list of the backwards tail will have been added

// The enter-key is technically both printable and non-printable and can

// The error is recoverable and was silenced.

// The existing first child is not a text node so we need to create one

// The fallback fiber was added as a deletion effect during the first pass.

// The first pass splits the children fibers into two sets. A head and tail.

// The first phase a "before mutation" phase. We use this phase to read the

// The following switch statement is only concerned about placement,

// The inner type can have defaults too

// The instance needs access to the fiber so that it can schedule updates

// The last rebase update that is NOT part of the base state.

// The logic below for Context differs depending on PROD or DEV mode. In

// The module cache

// The new fiber is a work in progress, but if there exists a

// The next one that isn't the same should be our match though.

// The next phase is the layout phase, where we call effects that read

// The next phase is the mutation phase, where we mutate the host tree.

// The old behavior was using the priority level of the Scheduler.

// The only remaining work is Idle.

// The parent is larger. Swap positions.

// The parent is smaller. Exit.

// The pending lanes were cleared at the beginning of beginWork. We're

// The pending queue is circular. Disconnect the pointer between first

// The primary child fragment does not have pending work marked

// The primary children do not have pending work with sufficient

// The primary children have pending work. Use the normal path

// The priority changed. Cancel the existing callback. We'll schedule a new

// The priority hasn't changed. We can reuse the existing task. Exit.

// The props argument to `createWorkInProgress` is `any` typed, so we use this

// The queue doesn't persist past this render pass.

// The queue is currently empty, which means we can eagerly compute the

// The queue of discrete events to be replayed.

// The react-debug-hooks package injects its own implementation

// The render included lanes that were updated during the render phase.

// The render is suspended, it hasn't timed out, and there's no

// The require function

// The resolved type is set if we know what the final type will be. I.e. it's not lazy.

// The rest are treated as attributes with special cases.

// The rest of this function is a fork of `updateClassComponent`

// The result can be nullish if a mock or a custom function is used.

// The return pointer of A and the return pointer of B point to different

// The return pointers point to the same fiber. We'll have to use the

// The root already suspended with a delay, which means this render

// The root entry object (effectively a try statement without a catch

// The root previous suspended and scheduled a timeout to commit a fallback

// The same thing applies to Suspense boundaries.

// The second renderer don't know that it needs to reset the WIP version during unwind,

// The source fiber did not complete.

// The source fiber did not complete. Mark it with Sync priority to

// The suspended lanes are no longer CPU-bound. Clear their expiration times.

// The target is a portal, but it's not the rootContainer we're looking for.

// The theory is that a person can't tell the difference between small differences in time.

// The time it took to render last row is greater than the remaining

// The trick we use is to cache the first of each of these inputs within an

// The use of `Object#toString` avoids issues with the `typeof` operator

// The validation flag is currently mutative. We put it on

// The wakeable resolved, so we no longer need to memoize, because it will

// The whole list is part of the tail.

// The work completed. Ready to commit.

// The work expired. Commit immediately.

// The work loop is an extremely hot path. Tell Closure not to inline it.

// The work-in-progress fiber. I've named it differently to distinguish it from

// The work-in-progress queue is the same as current. This happens when

// The work-in-progress tree is now the current tree. This must come after

// Then we can remove this special list.

// There are no base updates.

// There are working polyfills for <dialog>. Let people use it.

// There is no alternate. This is an unusual case. Currently, it only

// There is no effect on the root.

// There might be multiple of these in the list but since we're

// There might be nested nodes so we need to keep track of how

// There were render phase updates. These are only valid for this render

// There's a partial tree, and at least one of its lanes has expired. Finish

// There's additional work on this root.

// There's already a work-in-progress. Reuse it.

// There's no need to check for keys on text nodes since we don't have a

// There's no need to search deeper because for the purpose of giving

// Therefore we need to go through the whole tail to find if

// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable

// These are "enumerated" HTML attributes that accept "true" and "false".

// These are "enumerated" SVG attributes that accept "true" and "false".

// These are HTML attributes that are "overloaded booleans": they behave like

// These are HTML attributes that must be numbers.

// These are HTML attributes that must be positive numbers.

// These are HTML boolean attributes.

// These are circular

// These are reserved SVG and MathML elements.

// These are reset during render to allow the DevTools commit hook a chance to read them,

// These are set right before calling the component.

// These are the few React props that we set as DOM properties

// These attribute exists both in HTML and SVG.

// These effects should only be committed when components are first mounted,

// These particular numbers are vague estimates. We expect to adjust them based on research.

// These props are reserved by React. They shouldn't be written to the DOM.

// These set relatedTarget to null because the replayed event will be treated as if we

// These should not be included in production.

// These tags are only valid with a few parents that have special child

// These values may change as we process the queue.

// These will be overridden during the parent's reconciliation

// Third, even if you set all that aside, Suspense is like error boundaries in

// This API will tag the children with the side-effect of the reconciliation

// This Fiber's initial properties will always be overwritten.

// This Subscription's source should match where store came from: props vs. context. A component

// This action has a similiar effect to ActionTypes.INIT.

// This allows us to reset root when portals are popped.

// This also ensures a stable sort in V8 and other engines.

// This approach works across all browsers, whereas `change` does not fire

// This avoids unnecessarily recomputing memoized values.

// This behavior/bug has something to do with Object.preventExtension().

// This boundary already captured during this render. Continue to the next

// This branch is reachable if the render phase is impure.

// This can be replaced with a WeakMap once they are implemented in

// This can end up rendering this component multiple passes.

// This can happen if you passed a class to function component, or non-function.

// This can happen when we abort work.

// This can lead to tearing in the first renderer when it resumes,

// This check uses currentHook so that it works the same in DEV and prod bundles.

// This code is DEV-only so size is not a concern.

// This commit has passive effects. Stash a reference to them. But don't

// This component has already been unmounted.

// This container might be used for a portal.

// This could change in the future.

// This could've been outside the flag but I put it inside to reduce risk.

// This couples React to the Scheduler internals, so we're replacing it

// This creates some unlikely edge case issues if the user mixes

// This dispatcher does that.

// This dispatcher handles an edge case where a component is updating,

// This element was passed in a valid location.

// This enables DevTools to start capturing timing at any point–

// This enables us to pop only Fibers that provide unique contexts.

// This ensures that the version used for server rendering matches the one

// This entry module used 'exports' so it can't be inlined

// This environment has a native %IteratorPrototype%; use it instead

// This error was thrown as a convenience so that if you enable

// This error was thrown as a convenience so that you can use this stack

// This extracts the first frame from the sample that isn't also in the control.

// This fiber did not complete because something threw. Pop values off

// This fiber does not have any pending work. Bailout without entering

// This fiber doesn't have work, but its subtree does. Clone the child

// This finds the most significant non-zero bit.

// This first principle is that if we're going to suspend when we complete

// This function detects when a Suspense boundary goes from visible to hidden.

// This function is fork of reconcileChildren. It's used in cases where we

// This function is not recursive.

// This function is used both for updates and for re-renders triggered by a

// This gets reset before we yield back to the browser.

// This handles more types than `getPropType`. Only used for error messages.

// This handles the case of React rendering into a container with previous children.

// This handles the special case of a mutable source being shared between renderers.

// This happens if `finalizeInitialChildren` returns `true` (which it

// This has now been refined to a text node.

// This has now been refined to an element node.

// This has the downside of resetting values for different priority renders,

// This hook is normally a no-op.

// This is a CPU-bound tree. Skip this tree and show a placeholder to

// This is a breaking change that can wait until React 18.

// This is a constructor function, rather than a POJO constructor, still

// This is a consumer

// This is a delayed task.

// This is a exponential search for each boundary that commits. I think it's

// This is a fork of `requestUpdateLane` designed specifically for Suspense

// This is a fork of runWithPriority, inlined for performance.

// This is a known bug.

// This is a lazy pooled frozen object, so we need to initialize.

// This is a legacy edge case. The initial mount of a ReactDOM.render-ed

// This is a list of all SVG attributes that need special casing, namespacing,

// This is a mapping from React prop names to the attribute names.

// This is a move.

// This is a new mount or this boundary is already showing a fallback state.

// This is a new mount. Change the tag so it's not mistaken for a

// This is a polyfill for %IteratorPrototype% for environments that

// This is a re-render. Apply the new render phase updates to the previous

// This is a render phase update. Stash it in a lazily-created map of

// This is a special case that only exists for legacy mode.

// This is a special case. If any listener updates we need to ensure

// This is a transition, so we should exit without committing a

// This is a wakeable.

// This is also our approach for IE handling, for the reason above.

// This is always exactly one child

// This is always non-null on a ClassComponent or HostRoot

// This is an array for better minification.

// This is an insertion or in-progress hydration. The nearest possible

// This is an insertion.

// This is because we only process these plugins

// This is because we only process this plugin

// This is called right before React yields execution, to ensure `readContext`

// This is exported in FB builds for use by legacy FB layer infra.

// This is going to find the last row among these children that is already

// This is guaranteed to yield a script element.

// This is handy for testing error boundaries without noise.

// This is in postMount because we need access to the DOM node, which is not

// This is inlined manually because closure doesn't do it for us.

// This is intentionally a factory so that we have different returned constructors.

// This is intentionally an invariant that gets caught. It's the same

// This is intentionally written as a list of all properties.

// This is kind of an edge case.

// This is maintained with a counter, because the size of the priority queue

// This is necessary for Rollup to not consider these unused.

// This is not a transition, but we did trigger an avoided state.

// This is not replayable so we'll invoke it but without a target,

// This is only necessary when a select in "single selection mode".

// This is simpler for the single child case. We only need to do a

// This is so gross but it's at least non-critical and can be removed if

// This is split into a separate function so we can mark a fiber with pending

// This is the basic functionality of the event system. All

// This is the beginning of the main content.

// This is the entry point for every concurrent task, i.e. anything that

// This is the entry point for synchronous tasks that don't go

// This is the first dependency for this component. Create a new list.

// This is the first hook in the list

// This is the first hook in the list.

// This is the first update since React yielded. Compute a new start time.

// This is the first update. Create a circular list.

// This is the result of a discrete event. Track the lowest priority

// This is the rootContainer we're looking for and we found it as

// This is the same implementation as reconcileChildrenArray(),

// This is used by DevTools to force a boundary to suspend.

// This is used to create an alternate fiber to do work on.

// This is used to make sure we don't warn about the same

// This is why we ensure that non React root containers have inline onclick

// This isn't a real property on the hook, but it can be set to opt out

// This isn't directly used but is handy for debugging internals:

// This lane expired

// This leads to an ambiguity between <>{[...]}</> and <>...</>.

// This matches the property of native CompositionEventInterface.

// This may be because it's a Context (rather than a Consumer).

// This may be unset if the props are determined to be equal later (memo).

// This may change in the future with e.g. nested hooks.

// This may trigger infinite loops if componentWillReceiveProps calls setState.

// This means both of them need to be registered to preserve state.

// This means that if a lane is entangled during an interleaved event while

// This method must not throw, or React internal state will get messed up.

// This might have been modified.

// This might seem like it belongs on progressedFirstDeletion. However,

// This mirrors the code path above, but runs for hydration too.

// This module is forked in different environments.

// This module should not be running in strict mode, so the above

// This needs to be fixed in getComponentName so that it relies on the tag

// This prevents time from endlessly accumulating in new commits.

// This prevents:

// This render only included retries, no updates. Throttle committing

// This resets the Fiber to what createFiber or createWorkInProgress would

// This returns the highest priority pending lanes regardless of whether they

// This returns the priority level computed during the `getNextLanes` call.

// This should be fine because the only two other things that contribute to

// This should never happen. (Would happen if the anchor/focus nodes aren't

// This should only be reachable if we're suspended

// This should throw.

// This shouldn't be reachable, but as a fallback, return the entire bitmask.

// This shouldn't happen as long as we do top-down subscriptions correctly, but

// This shouldn't happen, something went wrong but to avoid blocking

// This tag allow us to uniquely identify this as a React Portal

// This tag allows us to uniquely identify this as a React Element

// This tag is not present in non Electron environments such as JSDom which

// This target container was successfully dispatched. Try the next.

// This this to be replayed later once the target is available.

// This tracks which mutable sources need to be reset after a render.

// This tree has been unmounted already. Dispatch without a target.

// This update does have sufficient priority.

// This update is going to be committed so we never want uncommit

// This warning would fire if you read context inside a Hook like useMemo.

// This will be the props with resolved defaultProps,

// This will create a new entry in the watched object in either case

// This will likely cause Bad Things (TM) to happen in Concurrent Mode.

// This will restart the begin phase with a new fiber.

// This will throw if radio buttons rendered by different copies of React

// This won't trigger the performance cliff mentioned above,

// This would be a good time to rethrow if any of the event handlers threw.

// This wrapper function gets inlined. Only exists so to communicate that it

// Throw out any hooks that were used.

// Timed out.

// Timer fired. Transfer to the task queue.

// Timer was cancelled.

// Times out immediately

// To avoid conditionally calling hooks, we fall back to a tiny wrapper

// To avoid creating an additional object, we just hang the .value

// To avoid side effects (such as losing text selection), only set value if changed

// To do that, we're replacing it with an update lane priority.

// To do this, we're going to go through the reconcile algorithm twice. In

// To ensure consistency across multiple updates in the same event, this should

// To figure out which ancestor instance we should use, we traverse

// To get around it, we can conditionally useEffect on the server (no-op) and

// To maintain the wrapperProps object reference, memoize this destructuring.

// To make comparing ReactElements easier for testing purposes, we make

// To preserve the expected "Pause on exceptions" behavior, we don't use a

// To preserve the preexisting retry behavior of error boundaries,

// To use getAttributeNS we need the local name which we don't have

// To work around this, initialize the fields below with doubles.

// Touch keyboard of Windows.  In such a case, the `char` property

// Track the context and the Fiber that provided it.

// Track the current IME composition status, if any.

// Track the input node that has focus.

// Track whether we've ever handled a keypress on the space key.

// Tracks components we have already warned about.

// Transfer time spent rendering these children so we don't lose it

// Tricky logic here:

// Trust the developer to only use possibleRegistrationNames in true

// Try to search down until we find one.

// Try to unify them. It's a bit tricky since it would require two return

// Try/catch helper to minimize deoptimizations. Returns a completion

// Turns 0b1000 into 0b0111

// Two elements created in two different places should be considered

// Typically this will be the root most one. However, stack frames may be

// UNSAFE_ ones before the deprecated ones, since they'll be 'louder'

// Unfortunately it makes React unusably slow for some applications.

// Unknown attributes should have lowercase casing since that's how they

// Unless the render was suspended or cascading work was scheduled,

// Unlike the class check below, it's not enforced in production for perf.

// Unmount

// Unmount should not be batched.

// Unmount the root by rendering null.

// Unsafe lifecycles should not be invoked for components using the new APIs.

// Unset styles on `lastProp` but not on `nextProp`.

// Unsuspend any update at equal or lower priority.

// Unwind the failed stack frame

// Update

// Update after calling subscribers in case of error.

// Update checked *before* name.

// Update pending async counts for all wrapped interactions.

// Update render duration assuming we didn't error.

// Update styles that changed since `lastProp`.

// Update the child lanes of all the ancestors, including the alternates.

// Update the existing instance's state, props, and context pointers even

// Update the fiber if the keys match, otherwise return null.

// Update the first and last pending times on this root. The new first

// Update the next thing we're working on in case something throws.

// Update the pending async work count for previously unscheduled interaction.

// Update the pending async work count for the current interactions.

// Update the props handle so that we know which props are the ones with

// Update the remaining priority in the queue.

// Update the source fiber's lanes

// Update the wrapper around inputs *after* updating props. This has to

// Use `_.noConflict` to remove Lodash from the global object.

// Use `util.types` for Node.js 10+.

// Use a `switch` statement to work with class constructors. See

// Use bigint stats if it's windows and stat() supports options (node 10+).

// Use polling on Mac if not using fsevents.

// Use source `argPos` if available.

// Use source `arity` if one is not provided.

// Use source `ary` if it's smaller.

// Use source `func` and merge bitmasks.

// Use source `thisArg` if available.

// Use the `click` event to detect changes to checkbox and radio inputs.

// Use the latest known implementation.

// Use this function to schedule a task for a root. There's only one task per

// Use this to detect multiple renderers using the same context

// Use this to track whether the error event is ever called.

// Used by getHighestPriorityLanes and getNextLanes:

// Used by persistent updates

// Used by renderers to avoid bundling object-assign twice in UMD bundles:

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,

// Used for hot reloading:

// Used for stashing WIP properties to replay failed work in DEV.

// Used to detect multiple renderers using the same mutable source.

// Used to reuse a Fiber for a second pass.

// Used to track how many concurrent renderers this context currently

// User-originating errors (lifecycles and refs) should not interrupt

// Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an

// Usually the current owner is the offender, but if it accepts children as a

// V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.

// Validate that the properties correspond to their expected values.

// Verify deps, but only on mount to avoid extra checks.

// Visit children because portals might contain host components.

// Visit children because they may contain more composite or host nodes.

// Visit children because we may find more host components below.

// Visit this fiber.

// Wait to do this until after remaining work has been scheduled,

// Walk in lockstep until we find a match.

// Walk the parent path to the root and update the child expiration time.

// Warn about invalid children here so that client and hydration are consistent.

// Warn about these lifecycles if they are present.

// Warn about using Maps as children

// Warn when a known attribute is a bad type

// Warn when passing the strings 'false' or 'true' into a boolean prop

// We allow auto-mocks to proceed as if they're returning null.

// We already have an alternate.

// We already have an existing node so let's just update it and delete

// We also skip portals because they are not part of this host tree.

// We are done with the effect chain at this point so let's clear the

// We aren't actually adding an update to the queue,

// We assume pendingProps, index, key, ref, return are still untouched to

// We assume that prepareToHydrateHostTextInstance is called in a context where the

// We avoid inlining this to avoid potential deopts from using try/catch.

// We can accumulate the flags, and the targetContainers, and

// We can always overwrite an existing timestamp because we prefer the most

// We can assume the previous dispatcher is always this one, since we set it

// We can avoid this infinite loop by explicitly marking the source as dirty.

// We can delete this special case once the new fork is merged.

// We can re-use it in hot functions like performConcurrentWorkOnRoot()

// We can reset these now that they are finished.

// We can reuse the existing object from previous renders.

// We can use any RetryLane even if it's the one currently rendering

// We can't rely on the event system being injected on the server.

// We can't schedule any follow up work for the root because the fiber is already unmounted,

// We check for window.hasOwnProperty('event') to prevent the

// We construct a different control for this case to include any extra

// We could also eagerly patch the method.

// We could check it early to avoid scheduling an unnecessary callback.

// We could have created a separate document here to avoid

// We could move it there, but we'd still need this for lazy code path.

// We could update instance props and state here,

// We could've passed this the first time

// We create tags in the namespace of their parent container, except HTML

// We currently set sibling to null and index to 0 here because it is easy

// We didn't find a boundary that could handle this type of exception. Start

// We do an initial pass to gather component names

// We don't currently have a way to increase the priority of

// We don't do anything in this mode.

// We don't expect any of the above to throw, but better to be safe.

// We don't have to traverse to the children of the list since

// We don't mind this list too much because we expect it to never grow.

// We don't process these events unless we are in the

// We don't support rendering Generators because it's a mutation.

// We don't want exception behavior to differ between dev and prod.

// We eagerly listen to this even though we haven't committed yet.

// We expect at least one stack frame to be shared.

// We explicitly want to coerce to number here if possible.

// We first render the head. If anything is in fallback state, we do another

// We found a suspense instance. That means that we haven't

// We got a match.

// We had an attribute but shouldn't have had one, so read it

// We have a match. This only drills down to the closest host components.

// We have a queue to process.

// We have already passed our CPU deadline but we still have rows

// We have an acceptable loading state. We need to figure out if we

// We have new updates that haven't been processed yet.

// We have no life-cycles associated with portals.

// We have now passed our CPU deadline and we'll just give up further

// We have successfully injected, so now it is safe to set up hooks.

// We immediately remove the callback from event listeners so that

// We initialize the default updater but the real one gets injected by the

// We intentionally don't use spread (or .apply) directly because it

// We intentionally fallthrough here if enableBlocksAPI is not on.

// We intentionally reset, rather than copy, actualDuration & actualStartTime.

// We just rendered the head.

// We listen to these events in case to ensure emulated bubble

// We listen to this event in case to ensure emulated bubble

// We matched the next one, we'll now assume that the first one was

// We matched the slot, but we didn't reuse the existing fiber, so we

// We may still have similar intermediate frames from the construct call.

// We memoize the elements for the rendered child component as an optimization.

// We might bail out of the loop before finding any but that

// We need this to execute synchronously every time we re-render. However, React warns

// We need to check all keys in case some are required but missing from

// We need to clear only if we didn't queue because

// We need to delete the row we just rendered.

// We need to temporarily unset name to avoid disrupting radio button groups.

// We need update the tracked value on the named cousin since the value

// We no longer need to track the active instance fiber

// We now have a consistent tree. Because this is a sync render, we

// We now have a consistent tree. The next step is either to commit it,

// We only do this deeper than head and body since they tend to have random

// We only expect a wrapped function to be executed once,

// We only have the top Fiber that was created but we need recurse down its

// We only have the top Fiber that was deleted but we need to recurse down its

// We only have the top Fiber that was inserted but we need to recurse down its

// We only use a Fiber to ensure the same hidden class so DEV isn't slow.

// We only want to warn if we're sure it's a new React.

// We perform this translation at the end of the event loop so that we

// We pick a train model where the next boundary commits at a consistent schedule.

// We push the context as early as possible to ensure stack integrity.

// We record this information as an expando on the error.

// We scheduled a timeout but it's no longer needed. Cancel it.

// We should have already attempted to retry this tree. If we reached

// We should never have an alternate for any mounting node. So the only

// We should not delegate these events to the container, but rather

// We should only process this nativeEvent if we are processing

// We should only use this function for:

// We should prefer to render the fallback of at the last

// We show the whole stack but dedupe on the top component's name because

// We special case a direct text child of a host node. This is a common

// We still have tail rows to render.

// We successfully dispatched this event.

// We suspended during the head. We want to show at least one

// We treat the ambiguous cases above the same.

// We tried to use Object.assign() instead but this is called in

// We use a double buffering pooling technique because we know that we'll

// We use a throwing setter instead of frozen or non-writable props

// We use the prefix to ensure our stacks line up with native stack frames.

// We use this as a heuristic. It's based on intuition and not data so it

// We use this when assigning a lane for a transition inside

// We want to capture the wrapper props and child props we used for later comparisons

// We want to ensure that a "busy" state doesn't get force committed. We want to

// We want to match the production code behavior (which will use HooksDispatcherOnMount),

// We warn in this case but don't throw. We expect the element creation to

// We warn when you define propTypes on lazy()

// We weren't previously hidden, and we still aren't, so there's nothing

// We will invalidate the child context in finishClassComponent() right after rendering.

// We will reassign it back when we pop the portal on the way up.

// We will still patch up in this case but not fire the warning.

// We'd like to remove this but it's not clear if this is safe.

// We'll add them to the base queue.

// We'll check if this is a container root that could include

// We'll do the same for `currentEventPendingLanes` below.

// We'll get a different iterator later for the main pass.

// We'll need a host callback the next time work is scheduled.

// We're about to bail out, but we need to push this to the stack anyway

// We're at the root.

// We're back to the root of this subtree. Exit.

// We're blocked on hydrating this boundary.

// We're deeper than the current hydration context, inside an inserted

// We're done.

// We're going to commit this fiber even though it didn't complete.

// We're going to find the first row that has existing content.

// We're going to render them separately later.

// We're going to search forward into the tree until we find a sibling host

// We're not blocked on anything.

// We're not inside React, so we may be in the middle of a browser event.

// We're running in the default, "independent" mode.

// We're still blocked.

// We're still blocked. Try again later.

// We're unblocked.

// We've determined that A is the current branch.

// We've determined that B is the current branch.

// We've just hydrated. No need to hydrate again.

// We've reached the end of the new children. We can delete the rest.

// We've reached the root.

// We've successfully replayed the first event. Let's try the next one.

// Webkit offers a very useful `textInput` event that can be used to

// What we need to determine is if there are any hooks that already

// When a checked radio tries to change name, browser makes another radio's checked false.

// When a store is created, an "INIT" action is dispatched so that every

// When a yielded Promise is resolved, its final value becomes

// When adding attributes to the HTML or SVG allowed attribute list, be sure to

// When adding attributes to this list, be sure to also add them to

// When adding new symbols to this file,

// When an interaction goes out of scope, the previous set (if any) is restored.

// When blurring, set the value attribute for number inputs

// When legacyFBSupport is enabled, it's for when we

// When newVal is an object do the merge recursively

// When suspending, we should always exclude lanes that were pinged or (more

// When syncing the checked attribute, both the checked property and

// When syncing the checked attribute, it only changes when it needs

// When syncing the value attribute, the value comes from a cascade of

// When syncing the value attribute, the value property should use

// When this becomes current, the previous queue and dispatch method will be discarded,

// When we go into a portal, it becomes the parent to remove from.

// When we go out of the portal, we need to restore the parent.

// When we try rendering again, we should not reuse the current fiber,

// Whether or not it would crash later, we want to show a good message in DEV first.

// Which might result in "SecurityError" DOM Exception and it is compatible to Safari.

// While we're inside a removed host node we don't want to call

// Widget Attributes

// Within the body of any async function, `await x` is transformed to

// Without some nodes in the tree having empty base times.

// Without this first invariant, passing a non-DOM-component triggers the next

// Work in progress (ex: onload events in incremental mode).

// Work in progress.

// Workaround for https://github.com/joyent/node/issues/4337

// Worst case the selector will throw again and then an error boundary will handle it.

// Yield after `yieldInterval` ms, regardless of where we are in the vsync

// Yielding to the browser will give it a chance to paint, so we can

// You’re frozen when your heart’s not open.

// `act` testing API

// `charCode` is the result of a KeyPress event and represents the value of

// `ensureRootIsScheduled` because the check above implies either that

// `expectedStyle` to a temporary DOM node to read its `style` attribute

// `flushDiscreteUpdates` starts a useless render pass which may cancels

// `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which

// `form.getElementsByName`, but that will only return direct children

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.

// `isInputPending` is not available. Since we have no way of knowing if

// `keyCode` is the result of a KeyDown/Up event and represents the value of

// `nativeEventTarget` is probably a window object.

// `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in

// `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247

// `omittedCloseTags` except that `menuitem` should still have its closing tag.

// `preventDefault()` in window `error` handler.

// `requestUpdateLane`. We assume it's the same as the root being updated,

// `toString`ed by IE8/9.

// `which` is an alias for either `keyCode` or `charCode` depending on the

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// a 'shared' variable that changes when act() opens/closes in tests.

// a PlacementAndUpdate.

// a batch. This is intentionally inside scheduleUpdateOnFiber instead of

// a better way to communicate whether this was a miss or null,

// a boundary.

// a child. Since we want to append the update only to the work-in

// a compiler or we can do it manually. Helpers that don't need this branching

// a fallback, then we should always suspend/restart. Transitions apply

// a global event handler. But because the error happens in a different

// a host component or host text.

// a nested suspense boundary within it. So we can use this as a fast

// a new mount, even though an empty version of it already committed.

// a non-delegated event.

// a parent of the Portal. That means we can ignore it because the

// a path may have been filtered out of this readdir, but

// a property called "_context", which also gives us the ability to check

// a push/pop misalignment.

// a root other than sync.

// a root, then we should also restart if we get an update or ping that

// a scheduled timeout.

// a stack.

// about to bail out, but there might be other lanes that weren't

// about useLayoutEffect in SSR, so we try to detect environment and fall back to

// above the current one, create a watcher on the parent

// accidentally pass it on to the delegate.

// active and not passive.

// acts like a "thread ID" here).

// actual time across multiple render passes.

// actually inside the passed-in node.)

// add is about to be emitted if file not already tracked in parent

// add the linkTarget for watching with a wrapper for transform

// additional work on this root is scheduled.

// affecting the algorithms where its used. Here I'm using

// after each key entry. The selection changes after keydown and before

// after first render to prevent infinite render phase updates.

// after we rerender. This is used as a helper in special cases

// again and the nodes are still in the host tree so these will be

// again. This is the same as context updating.

// aka when there is no current/alternate.

// all SC-specific things should not be hoisted

// all except special table nodes which cause bad parsing behavior anyway.

// all lifecycle effect tags.

// all pending updates are included. If it still fails after the second

// all previous Promises have been resolved before calling invoke,

// allow <SVG> or <mATH>.

// allow detectFactoryAndVerify to get ownProps

// allowing connectAdvanced's shouldComponentUpdate to return false if final

// almost identical to the logic used in the normal update path,

// already cloned. In legacy mode, the only case where this isn't true is

// already have an existing method we want to call, so there's no need

// already started rendering.

// also add them to this module to ensure casing and incorrect name

// also ensures that the minifier will not anonymize the function.

// also have been non-React nodes. We need to answer which one.

// always receive the correct fiber here

// an external backing store so that we can freeze the whole object.

// an immutable object with a single mutable value

// an isolated frame and process.

// ancestor components re-render before descendants

// ancestor path already has sufficient priority.

// and .done properties off the next function object itself. This

// and Laura Doktorova's doT.js (https://github.com/olado/doT).

// and a handler for that event throws. We should be resilient to most of

// and any newline or tab are filtered out as if they're not part of the URL.

// and apply the stashed updates on top of the work-in-progress hook.

// and are removed from @watched[directory].

// and both offsets 0, in which case we will have handled above.

// and delete the existing ones.

// and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240

// and don't track value will cause over reporting of changes,

// and eligible for a replay.

// and have the same names are omitted, just like in the HTML attribute filter.

// and https://github.com/facebook/react/issues/14239

// and improve init perf of processing this array, as it will

// and isMounted is deprecated anyway so we should be able to kill this.

// and it is guaranteed to be the work-in-progress version.

// and it represents a batch of work. Could make a helper function instead,

// and it simplifies other profiler code (including DevTools).

// and last so that it's non-circular.

// and nobody should be using this in existing code.

// and one of its descendants throws while unmounting a passive effect.

// and prepare a fresh one. Otherwise we'll continue where we left off.

// and replace it on the stack later when invalidating the context.

// and should be reset before starting a new render.

// and shouldn't be increasing the number of class names

// and switch to a different tree. Like a try/catch block. So we have to track

// and the same name are rendered into the same form (same as #1939).

// and the statsProp is undefined

// and there for cut off earlier. So we should find the root most frame in

// and treat reading from the source as we do in the mount case.

// and values needed to control behavior (forwarded refs, alternate context instances).

// and we won't require Trusted Type here.

// and when the current render (with the new getSnapshot function) is processed.

// and with only the default shallow comparison, we upgrade it

// and won't include inputs that use the HTML5 `form=` attribute. Since

// another level, but there's still an inner boundary that would show a fallback,

// any necessary setup in a predictable way. This predictability

// any references to cancelBubble throw "Member not found".  A

// anything before them are not considered for collapsing.

// anywhere in the tree. This effectively throttles progressive loading into a

// appears to fire in all of the remaining cases so we catch those and

// are no interleaved events.

// are suspended.

// are the same, the old child is unmounted and a new child is created.

// argument that corresponds to a known catch block.

// aria-* attributes should be lowercase; suggest the lowercase version.

// around this limitation, we use an opaque type that can only be obtained by

// array based heap, only the first one.)

// array might include canceled tasks.

// as a public API.

// as a ref instead of a useState/useReducer because we need a way to determine if that value has

// as an error.

// as appropriate.

// as before. We can fast bail out.

// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring

// as the deepest instance.

// as the newProps. The updatePayload will contain the real change in

// ascending numbers so we can compare them like numbers. They start at 90 to

// assigning it a key.

// assignment should always work unless something is misconfigured. Just

// assignment step above.

// assume that the child is current. This happens when we bailout on low

// assume we should escape the brackets to match literal characters

// assume we should match with a regex character class

// assuming that after the first child we've already added everything.

// async functions in terms of async generators, it is especially

// at the beginning of the render phase and there's no re-entrancy.

// at the next level instead of this one, because the child props

// at-rule

// attach another listener to flip the boundary back to its normal state.

// attached to each React Root and React Portal Root. Together,

// attempt, we'll give up and commit the resulting tree.

// attempts to re-render the boundary in the primary (pre-timeout) state.

// attempts to render the main content and only render fallbacks.

// attribute are assigned at the same time using defaultChecked. This uses:

// attributeName

// attributeNamespace

// attributes on `select`s needs to be added before `option`s are inserted.

// available until after the component has mounted.

// available, otherwise a store update may happen between render and the effect,

// avoid clashing with Scheduler's priorities.

// avoid doing another reconciliation.

// avoids allocating another HostText fiber and traversing it.

// avoids inaccurate Profiler durations in the case of a

// back here again.

// backwards-compatibility

// bailout. Most of the time, when people add non-React children to

// bails out of the update without touching the DOM.

// base state.

// batch. This enables them to be grouped later.

// be a pure function, so that it always returns the same lane for given inputs.

// be core the to event system. This would potentially allow

// be fired.

// be necessary but unfortunately many code paths reads from the workInProgress

// be pure function, so that it always returns the same lane for given inputs.

// be scheduled. Use a counter to prevent infinite loops.

// be successfully parsed from HTML, but will produce a mismatch

// because a MemoComponent fiber does not have hooks or an update queue;

// because in an ideal world we would not emulate and use

// because it's guaranteed to have already run when movementX

// because that won't throw in a non-strict mode function.

// because the root is not part of its own effect list.

// because there is no update we can add for useReducer hooks that won't trigger an error.

// because there's no ancestor that can handle it; the root is

// because these events do not consistently bubble in the DOM.

// because they're only guaranteed to be resolved here.

// because we assume its namespaced name is the same as our config.

// because we bailout on the primary tree completely and leave it in its old

// because we used to do it during top-level native bubble handlers

// because you think you might want to restart before committing. However,

// been processed.  If this went into useState/useReducer, we couldn't clear out the value without

// before ANY passive effect create functions are called.

// before the next rerender (including event handlers attached to ancestor

// before the second keystroke). Other input methods (e.g., paste) seem to

// begin phase by the time we start processing the queue, so we've already

// behavior as without this statement except with a better message.

// being called "element".

// being worked on.

// belong to the child set of A.return, and B must belong to the child

// bitmap value, we remove the secondary effects from the effect tag and

// blank-text buttons.

// bookkeeping for it. Not sure if we need to clear it when the listener is

// boolean, undefined, etc.

// booleans, but can also accept a string value.

// bother waiting until the root is complete.

// bottom->up. Top->down is faster in IE11.

// boundary or suspense list.

// boundary's children. This involves some custom reconcilation logic. Two

// boundary.

// breaks IE9: https://github.com/facebook/react/issues/13610

// browsers for all cases.

// browsers typically do this as necessary, jsdom doesn't.

// browsers. It adds spaces and sorts the properties in some

// but

// but I won't :)

// but absent in previous are added to watch list and

// but at commit. Therefore we need to track insertions which the normal

// but instead we rely on them being set during last render.

// but it triggers a bug in IE11 and Edge 14/15.

// but it's better then a hard failure

// but it's possible that we only have its inner render function in the map.

// but matters for <fbt>).

// but meh this is fine for now.

// but no stateful hooks have been used.

// but now we use different bubble and capture handlers.

// but present in previous emit `remove` event

// but since JS is single=threaded, we can rely on that to ensure

// but that sometimes behaves strangely in IE8. We could also try using

// but there's nothing we can do about that (short of throwing here and refusing to continue the render).

// but this hook recreates the queue in certain cases  to avoid updates from stale sources.

// but using the iterator instead.

// but we can still call the log-only boundary so the error isn't swallowed.

// but with the extra DEV validation to ensure hooks ordering hasn't changed.

// by calls to these methods by a Babel plugin.

// by the native compositionend event may be incorrect. Japanese ideographic

// call anyway. We also want to call componentWillUnmount on all

// call invoke immediately, without waiting on a callback to fire,

// call the user-provided callback.

// calls are equivalent because they wrap the same Foo function.

// can be used for comparison.

// can't forsee right now.

// cannot be called outside the render phase.

// capture values if possible.

// case the file's watcher misses it (and rely on throttling to de-dupe)

// case. We won't handle it as a reified child. We will instead handle

// cases are invalid.

// catch any error that may otherwise arise. See

// caught by a nested boundary. If not, it should bubble through.

// chance to clean up.

// changed

// changed since we began.

// changed.

// chars. Paste events should not lead to BeforeInput events.

// check if there is already a watcher on a parent path

// checking for BOS characters like "!" and "." (not "./")

// child. The nested children have already appended themselves.

// children and the parent.

// children to find all the terminal nodes.

// clear this in flushPassiveEffects.

// clone, or a work-in-progress hook from a previous render pass that we can

// code path that might call `prepareFreshStack`.

// code to add the data object to the top of the scope chain.

// code we must have exited earlier.

// collapse slashes to reduce potential for exploits

// commit phase. Consider removing the type check.

// commit-phase we mark this as such.

// commitRoot never returns a continuation; it always finishes synchronously.

// committed.

// committed. Disconnect the alternate pointers.

// committed. If it's sync, we still want to yield so that it can be

// commonly used development environments.

// completed class component. For example, we should not call

// completed work in order to do it.

// completed, even though it's in an inconsistent state.

// completely solve this IE9 bug), but Sebastian+Sophie seemed to like this

// component (i.e. when processing the update queue). But since since

// component's mount, ignore it for now (that is, treat it as if it was an

// component, throw an error. If Fiber return types are disabled,

// componentWillUnmount if it is deleted.

// componentWillUnmount, but before the layout phase, so that the finished

// components don't work properly in conjunction with event bubbling because

// composites before this host node is removed from the tree. Therefore

// compositionevent, otherwise extract it at fallback events.

// concurrent tree, in an inconsistent state. We want to treat it like

// concurrently. If the whole tree is rendered synchronously, then there

// connected descendants won't update until after this component is done

// connected to the store via props shouldn't use subscription from context, or vice versa.

// consistent train of commits. This also gives us an opportunity to restart to

// const index = cont.listeners.indexOf(listener);

// contains hooks.

// contains the DOM rendered by the server.

// context.dispatchException(context.arg) call above.

// context.method was "next", forget context.arg since it has been

// continue to propagate through the React fiber tree to find other

// convert to absolute path unless relative path already matches

// correct for wrong events emitted

// corresponding changes there.

// could alter all these plugins to work in such ways, but

// could be problematic, if we're not inside `Scheduler.runWithPriority`,

// could have been consolidated by watching one directory

// create constants based on platform, for windows or posix

// createConnect with default args builds the 'official' connect behavior. Calling it with

// ctrlKey && altKey is equivalent to AltGr, and is not a command.

// current iteration.

// current reducer, we can use the eagerly computed state.

// current, that means that we reused the fiber. We need to delete

// currentParentIsValid.

// cut off due to maximum stack limits. In this case, one maybe cut off

// cycle. This means there's always time remaining at the beginning of

// data types for reserved props

// dealt with the props. Context in components that specify

// debounced at least once.

// deep we are and only break out when we're back on top.

// default value provided by the browser. See: #12872

// default, slow path: scan the child sets of each parent alternate to see

// defaultProps, but React automatically puts defaultProps on props.

// defaultValue property -- do we need this?

// define __esModule on exports

// define getter functions for harmony exports

// define newObject to merge all values upon

// defined.

// definitely won't finish. Since we have a new update, let's mark it as

// delegate iterator, or by modifying context.method and context.arg,

// deleting text, so we ignore its input events.

// deletion, so don't let them throw. Host-originating errors should

// deletions from hidden tree. In Concurrent Mode, it's much simpler,

// deletions, so we can just append the deletion to the list. The remaining

// dependency list.

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args

// determines subdirectory traversal levels from root to path

// difference in the experience. However, waiting for longer might mean that we can avoid

// different from the current state.

// different layout, where the child points to a dehydrated fragment, which

// different options opens up some testing and extensibility scenarios

// directly represent `beforeInput`. The IE `textinput` event is not as

// disabled with `removeAttribute`. We have special logic for handling this.

// discard server response and fall back to client side render.

// discrete update per root so we can flush them early, if needed.

// discrete, even inside a discrete event.

// dispatch our fake event using `dispatchEvent`. Inside the handler, we

// dispatched event, so that the debugger will treat it as an uncaught

// dispatching them after the mount.

// do for gDSFP. I can't remember why.

// do in Concurrent Mode.

// do is to check its .name property.

// do not delay if we're inside an act() scope

// do the portal feature.

// do the same (see clones[i].inject)

// document. Let's just use the local `querySelectorAll` to ensure we don't

// documented since Node 10.4.1

// does to implement the `autoFocus` attribute on the client). But

// doesn't expect a non-string/function type and can throw confusing errors.

// doesn't fire when text is deleted, but conveniently, selectionchange

// doesn't give us keycodes, so we need to ignore it.

// doesn't matter since that means that the other boundaries that

// doesn't matter which bit is selected; you can pick any bit without

// doesn't seem worthwhile for the added complexity.

// doesn't, we manually listen for the events and so we have to enqueue and

// don't follow the same symlink more than once

// don't hoist over string (html) components

// don't natively support it.

// don't recurse further if it would exceed depth setting

// don't want this event dispatched twice through the event system.

// double values will cause Fibers to end up having separate shapes.

// during componentDidUpdate we pass the "current" props.

// during validateProps() which runs for hydration too.

// e.g. a destroy function in one component may unintentionally override a ref

// e.g. it might try to read from a part of the store that no longer exists.

// e.g. retrying a Suspense boundary isn't an update, but it does schedule work

// earlier than the other. We assume that the sample is longer or the same

// effect even though we're bailing out, so that cWU/cDU are called.

// effect of all current children being unmounted; even if the type and key

// effect of interrupting the current render and switching to the update.

// effect of interrupting the current work-in-progress.

// effects aren't added until the complete phase. Once we implement

// element can scroll.

// elements (not just inputs). Now that ReactDOMInput assigns to the

// elements instead of directly on the input). Without this, controlled

// emit `add` event.

// emit addDir unless this is a glob parent

// emit an add event if we're supposed to

// emit based on events occurring for files from a directory's watcher in

// empty, and we know we can safely read.

// empty, we need to schedule the text content to be reset.

// emulation (EnterLeave) or use state localized to that

// encapsulates the subscription logic for connecting a component to the redux store, as

// enqueue has not been called before, then it is important to

// ensure dir is tracked (harmless if redundant)

// ensure directories are tracked

// ensure empty dirs get tracked

// ensure relativeness of path is preserved in case of watcher reuse

// ensure that new initial loading states can commit as soon as possible.

// ensure that win32 namespaces has two leading slashes, so that the path is

// entanglement is usually "best effort": we'll try our best to render the

// entry may be undefined, because a warning or an error were emitted

// equal for testing purposes and therefore we hide it from enumeration.

// equivalent to this check.

// error See ReactErrorUtils for more information.

// error boundaries.

// error can be observed.

// erroring and the code that follows the `dispatchEvent` call below. If

// errors, it will trigger our global error handler.

// errors: https://github.com/facebookincubator/create-react-app/issues/3482

// errs on the side of fewer warnings

// eslint-disable-line

// eslint-disable-line no-empty

// eslint-disable-line no-new

// eslint-disable-line no-new-wrappers

// eslint-disable-next-line

// eslint-disable-next-line guard-for-in

// eslint-disable-next-line guard-for-in, no-restricted-syntax

// eslint-disable-next-line no-fallthrough

// eslint-disable-next-line no-param-reassign

// eslint-disable-next-line no-plusplus

// eslint-disable-next-line no-unreachable

// eslint-disable-next-line react-internal/no-production-logging

// eslint-disable-next-line react/no-danger

// eslint-disable-next-line-no-fallthrough

// eslint-disable-next-lined no-fallthrough

// evaluate what is at the path we're being asked to watch

// even if the work is suspended.

// even listeners these nodes might be wired up to.

// event exists. So we wouldn't see it and dispatch it.

// event is logged, it's coerced to an int. Convert to microseconds to

// event loop context, it does not interrupt the normal program flow.

// event on a non-React tree). We might also consider queueing events and

// event time. The next update will compute a new event time.

// event's native "bubble" phase, which means that we're

// event, then we can't dispatch it regardless of its target, since they

// event. Then reset the cached values once we can be sure the event is over.

// events fire on. That means we can skip this step, as event

// events from the nonDelegatedEvents list. Then we can remove

// events to their parent. We could also go through parentNode on the

// ever the previously attempted to render - not the "current". However,

// everyone, because the strict mode case will no longer be relevant

// everything is batched by default. We'll then have a similar API to opt-out of

// exceed it.

// exceeds the limit, we'll fire a warning.

// exception, let the outer generator proceed normally. If

// exception.

// execute code before the first await. Since we implement simple

// executor callback, and why async functions synchronously

// exiting a task.

// expected

// expiration time are props and context. We're already in the middle of the

// expired so we know to work on those next.

// expose properties, triggering a "Permission denied error" if any of its

// extend merge rules

// extra objects for things that are never updated. It also allow us to

// fail the render phase where it didn't fail before. So we log it.

// fails when pasting 100+ items)

// fallback children.

// fallback state, counts as the whole row being in a fallback state.

// fallback to a naive implementation.

// fallback. Otherwise, don't capture and bubble to the next boundary.

// falls through

// falsy value can't be a Symbol

// fiber associated with it.

// fiber. If beginWork throws, we'll use this to reset the state.

// fibers and continue.

// fibers. We assume that return pointers never criss-cross, so A must

// field after effects, see: detachFiberAfterEffects.

// filter it out using the allowed property list during the commit.

// filter out duplicates if specified

// filter out empty strings if specified

// final amounts. This seems counterintuitive, since we're intentionally

// find that inner container before moving on to finding the parent

// finishing. If there are too many, it indicates an infinite update loop.

// fire selectionchange normally.

// fire. The workaround for this bug involves attaching an empty click

// fires if there is an `Update` effect scheduled during mounting.

// fires only on input and textarea thus if there's no focused element we

// first entry should always have entry.parentDir === EMPTY_STR

// fix negative zero

// fixed, the key warnings will appear.)

// flip windows path separators

// flow doesn't do during mount. This doesn't happen at the root because

// flush synchronous work at the end, to avoid factoring hazards like this.

// fold the underlying StyledComponent rules up (implicit extend)

// fold the underlying StyledComponent target up since we folded the styles

// for each null value. However, we also don't want to call updateSlot

// for frozen objects

// for more details.

// for recursive deleting and cleaning of watched object

// for that fake event. If the callback throws, the error is "captured" using

// for the error message.

// for the event.

// for warnings.

// forcing another re-render, which we don't want.

// fork the function.

// forward the error to the transform stream

// forward the event if the value has changed

// fragment nodes. Recursion happens at the normal flow.

// frame that called our sample function and the control.

// frames added by the construct call.

// from being lost during SSR hydration.

// from its placeholder state to its primary/resolved state.

// from the effect tag.

// from the original lanes.

// fs_watch helpers

// fully completes before restoring state.

// function, symbol are assigned as empty strings

// function.sent implementation.

// functions and classes

// functions are allowed to be static if they're just being

// functions in invokeGuardedCallback, and the production version of

// get GC:ed but we don't know which for sure which parent is the current

// get `true` twice. That's probably fine?

// get attached.

// get it started back up to attempt the next item. While in terms of

// get lost if this row ends up dropped during a second pass.

// get reset if `textContent` is mutated.  We could add a check in setTextContent

// get the case where the capture phase event might change

// get the location of the block on parent.nodes (block's siblings)

// get to the completed state slightly earlier.

// getDefaultExport function for compatibility with non-harmony modules

// getHighestPriorityLane because it requires the fewest operations.

// getModifierState. If getModifierState is not supported, we map it to a set of

// getSnapshotBeforeUpdate is called.

// gets it and catching keydown lets us fire an event for the first

// goes through Scheduler.

// going to wait for all of them anyway, it doesn't really matter

// hacks to make that not totally break. Like transferring effects and

// had one; that is, all the effects in the tree including the root.

// handle the fallback state.

// handleChange() below needs to reference the dispatch function without re-subscribing,

// handled by `completeUnitOfWork` or `unwindWork`, but since we're

// handled properly by the win32 version of path.parse() after being normalized

// handlers can run. See https://github.com/facebook/react/issues/708.

// happen after `updateDOMProperties`. Otherwise HTML5 input validations

// happens when a Suspense component is hidden. An extra fragment fiber

// has a stable shape and so hopefully should be cheap to allocate.

// has ever gone from having children to deleting them or vice versa

// has no siblings nor a parent, we set it to null. Usually this is

// have been (and was previously) designed to take a closure to be

// have had an internalInstanceKey on it.

// have newProps so we'll have to reuse them.

// have not changed. Which is fine.

// have one on the alternate so we need to check in case this was a

// have set the values to before during the first pass. Ideally this wouldn't

// helpful for us so just check activeElement instead.

// heuristic to decide which lanes to attempt to render, and in which batches.

// higher priority.

// holds an emoji character like `\uD83D\uDE0A`.  Because its length

// hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.

// host node but that wouldn't work for React Native and doesn't let us

// how <noscript> is being handled. So we use the same document.

// http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist

// http://fb.me/prop-types-in-prod

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// https://bugs.chromium.org/p/v8/issues/detail?id=8538

// https://bugzilla.mozilla.org/show_bug.cgi?id=208427

// https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://github.com/amilajack/eslint-plugin-flowtype-errors/issues/133

// https://github.com/facebook/react/issues/11768

// https://github.com/facebook/react/issues/11918

// https://github.com/facebook/react/issues/12502

// https://github.com/facebook/react/issues/12506

// https://github.com/facebook/react/issues/13188

// https://github.com/facebook/react/issues/14365

// https://github.com/facebook/react/issues/16585

// https://github.com/facebook/react/issues/16734

// https://github.com/facebook/react/issues/19099

// https://github.com/facebook/react/issues/19651

// https://github.com/facebook/react/issues/3877

// https://github.com/facebook/react/issues/7253

// https://github.com/rollup/rollup/issues/1771

// https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl

// https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

// https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

// https://infra.spec.whatwg.org/#ascii-tab-or-newline

// https://infra.spec.whatwg.org/#c0-control-or-space

// https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// https://url.spec.whatwg.org/#url-parsing

// https://v8.dev/blog/elements-kinds#avoid-creating-holes

// https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts

// https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html

// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream

// hydrated it yet. Even though we leave the comments in the

// hydration parent is the parent host component of this host text.

// identities match.

// if (cont.watcherUnusable) {

// if I do. eslint-disable-next-line no-fallthrough

// if a Content Security Policy forbids using Function, but in that case

// if a component just imports ReactDOM (e.g. for findDOMNode).

// if a path is being added that was previously ignored, stop ignoring it

// if an open bracket/brace/paren is escaped,

// if children contains a non-element object. We should try to avoid that.

// if current directory is removed, do nothing

// if it is not a directory, nestedDirectoryChildren will be empty array

// if it's pinged, assume it's CPU-bound. Compute a new expiration time

// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes

// if shouldComponentUpdate returns false.

// if someone has already defined a value or Safari, then bail

// if stats doesn't exist the file must have been deleted

// if that one is still mounted.

// if the beginning of the glob is "./", advance the start

// if the component re-renders for a different reason and by that

// if the currently rendering lanes are inclusive of the pending mutation

// if the file is already being watched, do nothing

// if the only watched file is removed, watch for its return

// if the previous render was null (so the the container would already be empty).

// if there is no tracker at this point it's unlikely

// if we ever do those wrong, this throw will surface the error in our tests.

// if we only use three arrays to process all the categories of

// if we're a child of a dehydrated container, we need to first

// if what is being deleted is a directory, get that directory's paths

// iframe.contentDocument.defaultView;

// ignore it because `didError` will be false, as described above.

// ignores it.

// immediately after.

// immediately flush them.

// immediately, wait for more data to arrive.

// implementation using setTimeout.

// implementations of a working draft specification.

// implemented in any major browser. Only KeyPress has charCode.

// important to get this right, even though it requires care.

// in DEV mode if this property exists or not and warn if it does not.

// in Safari 9 which returns 'object' for typed arrays and other constructors.

// in a batch that does not also include the other lane. Typically we do this

// in case of intersecting globs;

// in case runtime.js accidentally runs in strict mode, we can escape

// in case the event system needs to trace it.

// in case they schedule additional work.

// in every case, so we don't have to touch the arguments object. The

// in fallback state. Then we render each row in the tail one-by-one.

// in our config atm.

// in that browser completely in favor of doing all that work.

// in the "together" mode, so we can continue from the state we had.

// in the bubble phase, so we need to accumulate two

// in the concurrent tree already suspended during this render.

// in the legacy event system, except the big difference between

// in the meantime, we can add/remove/change items and dependencies.

// in the stack.

// in this optimized path, mostly pushing stuff onto the stack.

// in-progress render.

// include every environment we run tests in), so the test framework

// include the fallback deletion effect.

// included in the current render. Usually, the priority level of the

// including any interleaving updates that occur.

// indicate that it still has pending work.

// infinite loop, because it iterates over the newly added props too.

// inherited deeply down the subtree. The upper bits only affect

// initial commit.

// initial value. In IE10/IE11 there is a bug where the placeholder attribute

// injected easily by `bin/regenerator --include-runtime script.js`.

// inserted into the React tree here. It just happens to not need DOM

// inserted, before any life-cycles like componentDidMount gets called.

// inserted.

// inside a blocking mode tree. If the Suspense is outside of it, we

// inside a non-concurrent tree, in an inconsistent state. We want to

// instance if there are no more listeners left

// instance if there are no more listeners left.

// instance. Note that we don't check this field on  the targetNode

// instances of chokidar, regardless of usage/dependency depth)

// instead of tuples.

// instead.

// intentionally not calling those, we need set it here.

// intermediate loading state. So we use heuristics to determine when.

// internal queue

// interrupt deletion, so it's okay

// into the async generator function so it can be handled there.

// invalidates the heuristics of the event plugin. We

// invariant for a missing parent, which is super confusing.

// invocations of the iterator.

// invokeGuardedCallback uses a try-catch, all user exceptions are treated

// invoked without arguments, but in all the cases we care about we

// is 2, the property `which` does not represent an emoji correctly.

// is a new ref we mark this as an update. All the work is done in commitWork.

// is changed from JS so we redefine a setter for `.value` that updates

// is created synchronously, otherwise a store update may occur before the

// is currently timed out, too.

// is inserted in between the Suspense fiber and its children. Skip

// is not resilient to the DOM state changing so we don't do that here.

// is often used for testing purposes.

// is re-rendered, the selectors are called again, and

// is to access a property that typically works for non-anonymous divs and

// is to tell small differences in time. Therefore, the longer we've already waited,

// is why the Promise constructor synchronously invokes its

// isBackwards

// it and we'll lose our progress. We should only do this if the new lanes are

// it as the trailing edge, or we've hit the `maxWait` limit.

// it at the keypress level and bail immediately. Android Chrome

// it behind on this node.

// it cannot be shared with the current fiber.

// it causes problems. This is meant to give a nicer error message for

// it doesn't make sense to restart only while in the period we're suspended.

// it from the child list so that we don't add it to the deletion

// it is possible that no option is selected.

// it would have deleted the dehydrated boundary nested inside already.

// it would pause the execution at this line.

// it's already rendering, we won't interrupt it. This is intentional, since

// it's not part of the same transition once the transition has

// it's not practical to try every single possible combination. We need a

// it's sync, we still want to yield so that it can be painted.

// it, on the update object. If the reducer hasn't changed by the

// it, so set the completion value of the entire function to

// it. If it has no children, this is still the first loop, and the only

// it. Using NoLane works because 0 is a subset of all bitmasks, so

// iterator prototype chain incorrectly implement this, causing the Generator

// its thennables. Instead, we'll transfer its thennables to the

// itself because the fibers are conceptually between the container

// itself should capture it.

// itself will be GC:ed when the parent updates the next time.

// itself. They will be added to the side-effect list as we pass through the

// just useEffect instead to avoid the warning, since neither will run anyway.

// keep track of whether it suspended or not.

// key, when multiple keydown events are fired but only one keyup is.

// keys multiple times.

// keys quickly. Implicit (null) keys get added to this set with their index

// keystroke if user does a key repeat (it'll be a little delayed: right

// keyup, but we check on keydown as well in the case of holding down a

// kick off the watcher

// lane in the transition range.

// lanes in the same batch, but it's not worth throwing out partially

// lanes is a superset of the lanes we started rendering with.

// lanes, since that guarantees that the value we're about to read from

// last

// last error event is always used. If the callback actually does error,

// last rendered item.

// last sibling.

// later and not trigger anything as the state now

// layout effects, and so on.

// layout, but class component lifecycles also fire here for legacy reasons.

// lazily which won't cover if the log function was extracted eagerly.

// left in the tail. We'll just give up further attempts to render

// libraries need to call batchedUpdates. Eventually, this API will go away when

// like a proxy to Context. This proxy object adds unnecessary code in PROD

// like caught exceptions, and the DevTools won't pause unless the developer

// likely unblocked. Try rendering again, at a new expiration time.

// line, that's a pretty good indicator that our sample threw at same line as

// list itself.

// list of the parent. The completion order of the children affects the

// list.

// list. PerformedWork effect is read by React DevTools but shouldn't be

// listener has already been added previously. However, we

// listener on the target node.

// listeners still fire for all the media events.

// listeners still fire for error and load events.

// listeners still fire for the error event.

// listeners still fire for the invalid event.

// listeners still fire for the load event.

// listeners still fire for the toggle event.

// listeners.

// listeners.add(listener);

// lists and take advantage of structural sharing.

// live outside of this function.

// loaded by a script tag in the presence of an AMD loader.

// location outside the try/catch block.

// locations where there is no enclosing try statement.

// lol @ IE not supporting String#repeat

// lower priority work to do. Instead of committing the fallback

// main reasons this is so complicated.

// maintain extra degrees of precision.

// makes sense elsewhere

// maybe we want to continue warning if they don't exist, to preserve the

// means `flushPassiveEffects` will sometimes result in additional

// meant to be awaited.

// member of intersection type." Whyyyyyy.

// memoized props/state to indicate that this work can be reused.

// memoized state to indicate that this work can be reused.

// method always terminates the yield* loop.

// might be flawed or unnecessary.

// might match additional HTML that is hidden when we read it using

// might unsuspend it, and vice versa. The only reason to suspend is

// minifier not to mangle the names of these two functions.

// minimatch options support

// miss anything.

// missed a blur event somehow.

// mixing React radio buttons with non-React ones.

// modifier keys exposed by the event. In this case, Lock-keys are not supported.

// modifies `watchPath` to the parent path when it finds a match

// mounted but this is a new fiber.

// mounted fiber is the parent but we need to continue to figure out

// move this assignment out of the common path and into each branch.

// moved from outside the window (no target) onto the target once it hydrates.

// mustUseProperty

// mutated. We have already warned for this in the past.

// mutations because it already exists.

// mutations that haven't been synchronized yet.

// name warnings.

// need an additional field on the work in progress.

// need to check filterPath on dirs b/c filterDir is less restrictive

// need to delete the existing child.

// need to dispatch in order.

// need to validate that the fiber is a host instance, otherwise

// nested `invokeGuardedCallback` calls do not clash. Otherwise, a

// nested call would trigger the fake event handlers of any call higher

// nested within a dehydrated boundary and if so, which one.

// never be thrown again.

// never bubble through the *DOM* tree unless an ancestor with onclick

// never changes.

// new markup in a temp node and then move the child nodes across into

// new. If a row has multiple Suspense boundaries, any of them being in the

// next state before entering the render phase. If the new state is the

// nextEffect pointers to assist with GC. If we have passive effects, we'll

// no consecutive self refs (.b.b); that is a precedence boost and treated differently

// no more pending effects.

// no need to use broadcast here

// node and the first child. It isn't surrounding the container node.

// node from the tree.

// node has fully mounted yet, and for scheduling event replaying.

// node that is from the other tree.

// node that we're free to reuse. This is lazily created to avoid allocating

// node.

// node. Unfortunately, if multiple insertions are done in a row we have to

// non-alphabetical order. Handling that would require sorting CSS

// non-interactive elements, which means delegated click listeners do not

// non-printable. One would expect Tab to be as well (but it isn't).

// nonDelegatedEvents list in DOMPluginEventSystem.

// nor polyfill, then a plain number is used for performance.

// normal children even if their identities match.

// normalized. Since it only affects IE, we're skipping style warnings

// normally do.

// not as a fragment. Nested arrays on the other hand will be treated as

// not defined.

// not have a clone, that means it wasn't processed, and the updates were

// not in the capture phase. That's because we emulate

// not measuring part of the render phase, but this makes it match what we

// not part of the same transition once the transition has committed. If

// notch on the scroll is always +/- 120, roughly equivalent to pixels.

// nothing should rely on this, but relying on it here means that we don't

// now unblocked. This first might not actually be unblocked yet.

// null and keep rendering. In the commit phase, we'll schedule a

// object and shouldComponentUpdate will always return true.

// object to hold per-process fs_watch instances

// object to not be returned from this call. This ensures that doesn't happen.

// objects. For full spec compliance, you may wish to configure your

// obnoxiously named function :)

// of DevTools integration and associated warnings and logs.

// of priority this work has the same priority as this current render,

// of the effect list for each phase: all mutation effects come before all

// of the existing task is the same as the priority of the next level that the

// of the polyfill.

// of the preceding one.

// of this function.

// ok not to if the visible content is still enough to indicate what

// on a fiber.

// on any nested boundaries to let them know to try to render

// on it

// on the client side because the browsers are inconsistent. Instead we call focus().

// on the root.

// on the same list as effects. We want to keep the effects from the primary

// one below.

// one does not already exist for the lanes we're currently rendering (which

// one more time for any missed in case changes came in extremely quickly

// one so we'll settle for GC:ing the subtree of this child. This child

// only additional allocation required is the completion record, which

// only codepath.)

// only ever need at most two versions of a tree. We pool the "other" unused

// only need to resolve once

// only push if _both_ are negative...

// opportunity later. So we mark this render as having a ping.

// opportunity to paint.

// option and select we don't quite do the same thing and select

// option to rely on it in the future?

// optionally relax regex

// options object:

// or _both_ are positive

// or a bogus entry to a file, in either case we have to remove it

// or a finally block) gives us a place to store values thrown from

// or boolean value assignment. Regular attributes that just accept strings

// or completeWork depending on whether we want to add them top->down or

// or not, return the runtime object so that we can declare the variable

// or, if something suspended, wait to commit it after a timeout.

// order may not be the same as the new order. We use the new order.

// order to produce the correct `offset` value.

// order.

// other events and have it go through ReactBrowserEventEmitter. Since it

// other nodes in them. We also ignore components with pure text content in

// otherwise it won't capture incoming events that are only

// otherwise we won't suspend.

// our activeElementValue variable, allowing us to ignore those changes

// ourselves to this constraint, though. If the behavior diverges, we should

// out known bad ones like `onclick`. We can't suggest a specific replacement though.

// outer generator.

// over and traverse parent path again, this time treating the exception

// over this extra fragment fiber and proceed to the next parent.

// overwritten while composition continues.

// painted. Conceptually, this is really the same as pinging.

// parent boundary that hasn't above this one so we need to find

// parent re-rendered without this component and we're about to unmount.

// parent watcher

// parsing rules -- if we're down here, then none of those matched and

// part of the second pass. In that case nothing will subscribe to

// pass entirely and go straight to rendering the fallback. (In Concurrent

// pass host context to this method?

// pass null in place of where we usually pass the current child set. This has

// pass the Container node as the targetNode, you will not actually get the

// pass through beginWork to rerender all children (including the tail) with

// pass to any Profiler onRender() hooks. This also provides DevTools with a

// passed inline.

// passed through to selectorFactory

// passing null.

// passing the value through getToStringValue first.

// passive by default on document. React doesn't bind them

// passive effects. So we need to keep flushing in a loop until there are

// path from the normal path. I'm tempted to do a labeled break here

// path instead, so that we do consolidate going forward.

// path to compute the correct tail.

// pending level.

// pending time is whatever is left on the root fiber.

// pending updates to the end of the list and keep processing.

// pending work.

// performance.now returns a float, representing milliseconds. When the

// phase event listeners (via emulation).

// phase event listeners.

// phase introduces a potential mistake where we suspend lanes that were

// phase, which we are now aborting. Remove the updates from the queues so

// phase. They should be discarded if the render is aborted. Therefore,

// physical keyboard key.

// pinged or updated while we were rendering.

// place our cache into shared context so it'll persist between HMRs

// placeholder and without scheduling a timeout. Delay indefinitely

// placement for inserting new children.

// please ensure we do the following:

// plugin (BeforeInput, Change, Select). The state in

// plugin. However, the plugins below either expect

// possible for anything else to have happened in between our callback

// post mount to force it to diverge from attributes. However, for

// prefer "folder/index.js" instead of just "index.js".

// preserve the current depth here since it can't be derived from

// preserve this symlink's target path

// preserves full path in case of trailing path separator

// prevent a bail out.

// prevent duplicate handling in case of arriving here nearly simultaneously

// previously was rendered in its fallback state. One of the promises that

// primary children. In mutation mode, we also need the flag to

// primary tree will commit in an inconsistent state, so when we do the

// printable characters (normalized to `Unidentified`), ignore it.

// priority as an argument to that function and this one.

// priority for this boundary.

// priority this work has the same priority as this current render, it's

// priority without also including the lower priority updates. This works well

// priority. Bailout.

// priority: the bailed out fiber's child reuses the current child.

// probably be avoided if Subscription's listeners logic is changed to not call listeners

// problems, please detail your unique predicament in a GitHub issue.

// process the abstract event manually.

// process them now.

// processUpdateQueue, but that didn't happen in this case because we

// profiler durations.

// properties are accessed. The only seemingly possible way to avoid erroring

// properties in the client & server versions or applying

// properties:

// property

// property, it may be the creator of the child that's responsible for

// propertychange on the first input event after setting `value` from a

// props have not changed. If false, the selector will always return a new

// props.

// provides a surprisingly accurate mapping for US and European users.

// push symlinks back to the top of the stack to get handled

// pushHostContext() only pushes Fibers that provide unique contexts.

// queue -> linked list of updates. After this render pass, we'll restart

// queue is a singly-linked list with no cycles, we can append to both

// queueing is accummulative.

// raise warnings and prevent the new value from being assigned.

// rare, but as a last resort, pick a default lane. This will have

// rarely, since we try to avoid it) updated during the render phase.

// rather than attributes. These are all booleans.

// rather, it wraps around an inner component, which may or may not

// rawEmitters.add(rawEmitter);

// re-define the origin and newComer as targetVal and newVal

// re-initializing custom elements if they exist. But this breaks

// re-render a fallback. This is temporary until we migrate everyone to

// react-dom is used with production (non-profiling) bundle of

// real paths past the symlink

// realpath has already been resolved

// rebuild the output if we had to backtrack at any point

// recent event, and we assume time is monotonically increasing.

// recent mutation.

// reclaim the extra memory if needed.

// reconciliation

// record like context.tryEntries[i].completion. This interface could

// recreated.

// recursive case

// reduce size and overhead. The separate object references context via

// reducer returns their initial state. This effectively populates

// regeneratorRuntime in the outer scope, which allows this module to be

// register it to the root container. Otherwise, we should

// register the event to the target element and mark it as

// regular expressions

// remain on that fallback regardless of whether the content has resolved.

// remaining updates is accumlated during the evaluation of the

// remove escape chars and return result

// remove from the queue because you can't remove arbitrary nodes from an

// remove path parts that are globby

// remove single star from output

// removeChild on the inner nodes because they're removed by the top

// removed.

// removes this instance's listeners and closes the underlying fs_watch

// removes this instance's listeners and closes the underlying fsevents

// render and there's another warning for that anyway.

// render pass will run to completion or restart or "suspend" the commit.

// render phase update. It assumes there is either a current hook we can

// renderLanes from the original lanes.

// renderer.

// rendering it again.

// rendering it before rendering the rest of the expired work.

// rendering the fallback children.

// rendering. We might want to restart this render. This should mirror

// replace the (invalid) block with it's nodes

// replaying on render function. This currently only patches the object

// report Enter as charCode 10 when ctrl is pressed.

// rerender the children.

// reset "prev" to the first token

// reset output with globstar

// reset previous token to globstar

// reset the cached userIgnored anymatch fn

// result in far fewer object allocations and property accesses

// result, either by returning a { value, done } result from the

// resulting list is the set that would belong to the root's parent, if it

// resuming, this may not be true.

// retries so that we don't show too many loading states too quickly.

// retry any lane at equal or lower priority, but don't try updates at higher

// retry listener to the promise. This flag is also used to hide the

// returns boolean indicating whether fsevents can be used

// revealOrder undefined can't be trusted because it don't

// root boundaries that match that of our current "rootContainer".

// root has work on. This function is called on every update, and right before

// root inside of batchedUpdates should be synchronous, but layout updates

// root.

// root; if a task was already scheduled, we'll check to make sure the priority

// row at the tail. So we'll keep on and cut off the rest.

// same as the current state, we may be able to bail out entirely.

// same children then we're still in progressive loading state.

// same error.

// same event, like if you perform an update inside `flushSync`. Or any other

// same fiber again.

// sanitizeURL

// satisfies our requirement. Our requirement is not to produce perfect

// scan the contents of the dir

// schedule a callback until after flushing layout work.

// schedule a side-effect to do the updates.

// scheduleCallbackForFiber to preserve the ability to schedule a callback

// scheduled before we entered the render phase.

// scheduled work and instead do synchronous work.

// scheduler/tracing

// scraping the MDN documentation.

// script and fires only keydown, keypress, keyup. Catching keyup usually

// search past them. This leads to exponential search for the next sibling.

// second pass to render the fallback, we do some exceedingly, uh, clever

// selection (this matches native `select` event behavior). In HTML5, select

// selectionchange needs to be attached to the document

// selector

// self and source are DEV only properties.

// semantics of the native select event.

// separate issue. Write a regression test using string refs.

// set aside negated glob strings

// set of B.return.

// set the index to the next closing character

// set them on the actual target element itself. This is primarily

// set to true and it does not execute

// setting context.delegate to null, and returning the ContinueSentinel.

// setting it the first time we go from not suspended to suspended.

// settings in a very weird way, but solving for those cases

// should *not* suspend the commit.

// should be deferred until the end of the batch.

// should be invisible. If there are already mounted boundaries

// should clear the child pointer of the parent alternate to let this

// should immediately commit it or wait a bit.

// should probably be inlined somewhere and have its logic

// shouldComponentUpdate is tricky; but we'll have to account for

// shouldn't be removed because it matches a different glob

// showing an intermediate loading state. The longer we have already waited, the harder it

// showing content on the screen, as opposed to being in fallback state or

// sibling order but that isn't a strong guarantee promised by React.

// sibling, or the parent if there are no siblings. But since the root

// sibling. If there are no more siblings, return to the parent fiber.

// siblings.

// side of them.

// side-effect order.

// since in the common case of a single root app it probably is. If it's not

// since it's known to be in an inconsistent state. Use a force update to

// since the rest will all be insertions.

// since we're leaving it behind on this node.

// skipped over the parent when we bailed out.

// skipped update, the previous update/state is the new base

// so let's just skip over it to find memo() outer wrapper.

// so that e.g. DevTools can display custom hook values.

// so that it's consistent if the number of children grows.

// so that results are always delivered in the correct order. If

// so that the async generator function has the opportunity to do

// so that we don't prematurely signal complete for interactions when there's e.g. hidden work.

// so the stack is accurate.

// so we allow it only if we don't know what the parent is, as all other

// so we assign defaultValue to the same thing as the value property

// so we can always restart.

// so we can tell if any async act() calls try to run in parallel.

// so we got to do the directory check beforehand

// so we have to do it now instead.

// so we use a ref to ensure that it always has the latest version.

// so we use the old behaviour (Context.Consumer references Context) to

// so we'll just enter that. The only difference is we'll bail out

// solution. The value can be a boolean or object so that's why it's forced

// some renderers as primary and others as secondary. We only expect

// sometimes bails out later in the begin phase. This indicates that we should

// sometimes when it hasn't). IE's event fires out of order with respect

// source during the current render pass, so we need to do a bit more work.

// spaces, for instance (\u3000) are not recorded correctly.

// special case for strings ending in enclosure containing path separator

// special case the scroll event because the reality is that any

// special cases and we'll deal with them.

// special to do. Need to push to the stack regardless, though, to avoid

// startup

// state

// state of the host tree right before we mutate it. This is where

// state, no effects. Same as what we do for Offscreen (except that

// state, only for the following bubble event to come in

// state. Now that we have additional work, cancel the timeout.

// stateNode is any.

// statement, but eslint doesn't know about invariant, so it complains

// statically styled-components don't need to build an execution context object,

// stats is always present

// stats.mode may be bigint

// stepped past dehydrated DOM nodes to get here. However they could

// still want to warn on the client.

// stopWatching() should be a noop here but we call it just in case we

// store a single event to be replayed.

// store the version in case other components read from it.

// strict mode using a global Function call. This could conceivably fail

// strip consecutive `/**/`

// style object but the events that fire will still be prefixed, so we need

// stylis has no concept of state to be passed to plugins

// sub-tree for that root and make that our ancestor instance.

// subscribed to the source, and if so, whether there are any pending

// subscription callback always has the selector from the latest render commit

// subscription is created and an inconsistent state may be observed

// subsequent synchronous update to re-render the Suspense.

// succeed and there will likely be errors in render.

// sufficient for updates within the same priority, since we want to treat

// superfluous and we'll delete it. Since we can't eagerly delete it

// support window.event.

// supports within in a single renderer. Such as parallel server rendering.

// supposed to capture all errors that weren't caught by an error

// suppress unlink events on never before seen files

// suspend for longer if possible.

// suspend the commit. Pretend as if the suspended component rendered

// suspended it has resolved, which means at least part of the tree was

// suspended level. Ping the last suspended level to try

// suspended now, right before marking the incoming update. This has the

// suspended render.

// switch on that value.

// synchronously to block concurrent data mutations, and we'll includes

// systems is that the modern event system now has an event listener

// tags get no namespace.

// tail

// takes the extra step of enabling pause on caught exceptions. This is

// textContent. E.g. "foo" will match "f<span>oo</span>" but that still

// than once; for example, if non-React code also calls `dispatchEvent`

// that are shown on error are two different sets, so we shouldn't reuse

// that causes emitted paths to incorporate the link's path

// that causes it, under certain circumstances, to provide the same value for

// that child fiber is setting, not the reconciliation.

// that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

// that could already be hydrated, we wouldn't have found them

// that has been unmounted.

// that have been unsubscribed in the  middle of the notification loop.

// that is eventually read during hydration.

// that just executes the given callback immediately.

// that might cause other unknown side-effects that we

// that plays more nicely with the browser's DevTools. The idea is to preserve

// that regardless.

// that the "current" fiber pointer gets updated so we need a commit

// that the "current" props pointer gets updated so we need a commit

// that trying again will succeed

// that was thrown. It's possible that this error handler will fire more

// that we can show the initial loading state as quickly as possible.

// that we don't block potential future ES APIs.

// that we first we try to render one tree, and if that fails, we render again

// that were previously skipped when the tree was hidden. That set of

// that weren't processed.

// the .value of the Promise<{value,done}> result for the

// the DOM node back to the controlled value. This is necessary when React

// the DOM nodes representing these roots are the "rootContainer".

// the React name like we do for attributes that exist only in HTML.

// the `possibleStandardNames` module to ensure casing and incorrect

// the `source` property as a convenience for inlining compiled templates.

// the actual printable character.

// the allowed property list in the commit phase instead.

// the base state unless the queue is empty.

// the begin phase. There's still some bookkeeping we that needs to be done

// the callback doesn't error, but the error event was fired, we know to

// the capture phase here still. This is a trade-off,

// the commit side-effects on the root.

// the component is rerendered and the value reverted before all the event

// the control. I.e. before we entered the sample frame. So we ignore this result.

// the developer's perspective, the error is uncaught.

// the different event systems have different DOM event listeners.

// the dispatcher used for mounts.

// the earliest expiration time on the root. Then use that to quickly bail out

// the earliest opportunity.

// the effect of interrupting the current work-in-progress render.

// the effect of remounting all children regardless of whether their

// the error. Bubble it to the next boundary.

// the event in the out event of the other target. If this is replayed,

// the existing behavior manually on the roots now.

// the existing children. Conceptually, the normal children and the children

// the fact that we have it is the same as the expected.

// the final result produced by the iterator.

// the first ancestor. Next time, we will ignore the event.

// the first item in the list.

// the first pass, we schedule a deletion for all the current children by

// the first self-ref is always untouched

// the force suspend context. If the first render didn't have anything in

// the future if we implement resuming, or some form of that.

// the host tree after it's been mutated. The idiomatic use case for this is

// the hottest path, and Object.assign() was too slow:

// the hydration is successful of a javascript: URL, we

// the initial state tree.

// the input might not even be in a form. It might not even be in the

// the list will propagate the change when it rerenders.

// the logic of whether or not a root suspends once it completes.

// the longer we can wait additionally. At some point we have to give up though.

// the main content and only render fallbacks.

// the message event.

// the method takes exactly one argument, since that happens to be true

// the middle of the notification loop, where `subscription` will then be null. This can

// the most recent event from that source.

// the mutation phase, so that the previous tree is still current during

// the new API.

// the new state tree with any relevant data from the old one.

// the newly allocated props object.

// the next discrete event.

// the next prop is different than the server value, so just return

// the next tick, or earlier if something calls `flushSyncCallbackQueue`.

// the only reason we track the event time, then probably not.

// the other plugins are essentially polyfills. So the plugin

// the outer generator.

// the outer most that is known.

// the performance wins from the change. So we emulate

// the phases properly, like we do with the SimpleEvent

// the problematic code almost always lies inside that component.

// the proper solution is to fix the accidental strict mode problem. If

// the render phase.

// the renderer. Such as when we're dispatching events or if third party

// the rest.

// the root always starts with a "current" with a null child.

// the root has an effect, we need to add it to the end of the list. The

// the same root, then it's not a huge deal, we just might batch more stuff

// the sample somewhere in the control.

// the source is consistent with the values that we read during the most

// the stack without entering the complete phase. If this is a boundary,

// the stack.

// the target fiber to a different ancestor. We had similar logic

// the target node

// the tree, it is using a ref to a child-less DOM node.

// the un-prefixed "animation" and "transition" properties are defined on the

// the unwanted keypress events. Enter is however both printable and

// the update is added to a shared queue, which outlasts the

// the update queue. However, there's an exception: SimpleMemoComponent

// the updates that were skipped. Usually we only suspend at the end of

// the validation flag non-enumerable (where possible, which should

// the whole system, dispatch the event without a target.

// the whole system.

// the work-in-progress hook.

// the wrapperState._initialValue property. This uses:

// their event listeners to the respective elements that their

// them got retried so they'll still be blocked in the same way

// them to update.

// then don't suspend/restart.

// then it needs to call setState to recover from errors.

// then it's because we couldn't dispatch against this target previously

// then let that catch block handle the exception normally.

// then the tail doesn't matter. Anything new that suspends will work

// then we suspend/restart for 500ms since the last time we showed a fallback

// then we would risk falsely saying two separate memo(Foo)

// then we'll get the priority of the current running Scheduler task,

// there are also other cases when this might happen (such as patching

// there are any.

// there may be state updates already scheduled from the old source.

// there should be at least two self-refs to do a replacement (.b > .b)

// there to be two concurrent renderers at most: React Native (primary) and

// there's a new task, or that there's no remaining work on this root.

// there's pending input, always yield at the end of the frame.

// therefore not reporting its length accurately..

// these aren't boolean attributes (they are coerced to strings).

// these children are not part of the reconciliation list of children.

// these modules complicates things, as you'll essentially

// these properties stay in sync with the current stylis run

// they are left as they are instead.

// they cannot handle preferred fallback states.

// they do not persist to the next render. Do not remove updates from hooks

// they fire before the next serial event.

// things simple and return the next function itself.

// this case.

// this function wraps mapToProps in a proxy function which does several things:

// this immediate suspense boundary and gets reset each new

// this in the host environment that also has access to this prop. That

// this is needed to work around a chrome bug where setting defaultChecked

// this is no longer necessary.

// this may also return a SuspenseComponent or HostRoot to indicate that.

// this point, it errored again. Commit it.

// this render is thrown away. Since it's a race condition, not sure it's

// this render.

// this special case and use the same logic for all events.

// this will never be skipped by the check above.

// those cases. Even if our error event handler fires more than once, the

// those special-case tags.

// those trigger a fallback, then don't suspend/restart. We want to ensure

// those two cases. Need to fix this before exposing flushDiscreteUpdates

// those updates as parallel.

// through Scheduler

// through in twos. The events are in pairs of two to save code

// through the React tree. However, on Mobile Safari the click would

// through this pass since if the target is hydrated it would

// throw the exception.

// thus be captured by `keypress`, no other non-printable key should.

// time the reducer has changed.

// time we apply the entanglement.

// time we enter the render phase, then the eager state can be used

// time we have to render. So rendering one more row would likely

// to a SimpleMemoComponent to allow fast path updates.

// to account for it here, too. Reset to the value of the current fiber.

// to add them to the deletion list.

// to arrive.

// to attempt to render the primary children again.

// to avoid a push/pop misalignment.

// to avoid choosing a lane that is already in the middle of rendering.

// to be a string.

// to be able to optimize each path individually by branching early. This needs

// to be removed, such as transitioning from a checkbox into a text input

// to check if the un-prefixed events are usable, and if not remove them from the map.

// to consolidate.

// to create a new function object. We can even get away with assuming

// to delete it. So we need to remove it from the list. Deletions are stored

// to determine what the child props should be

// to determine what the child props should be.

// to document anymore, but changing this now would undo

// to filter them out until we fix the logic to handle them correctly.

// to find the callsite that caused this warning to fire.

// to forget to do before returning it. E.g. for the single child case.

// to get it started back up to attempt the next item. While in terms

// to key and input events on deletion, so we discard it.

// to make ignoredPaths changes effective

// to only set the value if/when the value differs from the node value (which would

// to render it.

// to schedule a side-effect to do the updates.

// to schedule work on. In this case we have to schedule it on the

// to see if one of its parents is a React owned DOM node.

// to see what path the root points to. On the way we may hit one of the

// to stay in place.

// to switch statement in `completeWork`.

// to the algorithm must be the same. For example, we use the `renderLanes`

// to the current index, and don't add the "./" characters

// to the end. This breaks the guarantee that life-cycles fire in

// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine

// to the state. This greatly simplifies lookbehinds when

// to this case. If none is defined, JND is used instead.

// to throw, e.g. if it has a cross-origin src attribute.

// to unblock.

// to update this element.

// together more than necessary.

// track new directories

// track new paths

// track of how many dependencies remain but it gets tricky because

// trailing edge, the system time has gone backwards and we're treating

// traversal in a later effect. See PR #16820. We now clear the sibling

// traverseAllChildren used to do for objects as children

// treat it like a new mount, even though an empty version of it already

// tree is part of a hydrating tree. This is used to determine if a child

// tree which will affect the tail. So we need to use the normal

// tree.

// tree. So we copy the primary child fragment's effect list, which does not

// tree. To do this we can use getClosestInstanceFromNode, but we

// triggered on the document directly.

// try to extract the composed characters from the fallback object.

// try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake

// try-catch. Neat!

// type of the event.

// typeof check of "unknown" circumvents this issue (and is also

// unblock the surrounding content. Then immediately retry after the

// unfortunate because it triggers the slow path all the time. We need

// unified ._invoke helper method.

// unintuitive, though, because even though React has caught the error, from

// unlike current.memoizedProps which will be the unresolved ones.

// unmount all the children. componentDidCatch will schedule an update to

// unmounted.

// unravel them when transferring them to the base queue.

// until `blur` in IE8.

// until we receive more data.

// unwanted click events.

// up necessary since we never stop tracking anymore.

// up text content during hydration mismatch). So we'll check this again.

// up the fiber tree from the target instance and attempt to find

// up/down buttons on an <input type="number">. Anonymous divs do not seem to

// update in the past but didn't complete it.

// update to the current fiber, too, which means it will persist even if

// update/state.

// updates at the same priority within the same event. To do this, the inputs

// updates) to a group of lanes (used for flushing work).

// updates, and deletions. To avoid needing to add a case for every possible

// updates, to preserve historical behavior of legacy mode.

// us to ship builds of React without the polyfilled plugins below.

// use as a base. When we reach the end of the base list, we must switch to

// use make it a noop by treating it as the default revealOrder.

// use process.nextTick to allow time for listener to be bound

// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store

// useMutableSource, we should ensure that there is no partial work at the

// used in error messages

// used to compute Connect's displayName from the wrapped component's displayName.

// used to get the classname of a nested styled component

// useful, so we don't use it.

// using `which`.

// using the current time.

// valid selection is anchorNode and focusNode both equal to this node

// value set by a create function in another component.

// value="" should make a value attribute (#6219)

// values.

// variable specified by delegate.resultName (see delegateYield).

// via multiple paths (such as _handleFile and _handleDir)

// visual feedback, "flashing" outermost parent rectangles is sufficient.

// wait until the next time we yield.

// want to reconcile without matching against the existing set. This has the

// want to warn if we can't detect the priority

// warnings.

// was changed but the input saw no event or value set

// was copied.

// was part of *our* root.

// was previously checked to update will cause it to be come re-checked

// watch symlink directly (don't follow) and detect changes

// way this could possibly happen is if this was unmounted, if at all.

// way to access it when the onCommitRoot() hook is called.

// way to define them.

// we already scheduled one when we created the queue.

// we already threw above.

// we are actually fully unblocked it will be fast to replay them.

// we bail out on a parent fiber that then captures an error thrown by

// we can accurately attribute time spent working on it, And so that cascading

// we can assume that they would have prevented this update.

// we can continue to replace it without aborting even if it is not a text

// we can optimize this reconciliation pass by not tracking side-effects.

// we did find already has their listeners attached.

// we do an inner loop while we're still inside the host node.

// we haven't gotten to hydrate it yet. There might still be a

// we ignore all errors here, since when the component

// we keep track of which ones already failed during this batch.

// we know that the last error event is the correct one, because it's not

// we need to transfer the updates to that queue, too. Because the base

// we need to trap an event listener onto the target.

// we need to traverse up through the DOM till we find the correct

// we pass in the meantime. That's going to be our tail in reverse

// we read something.

// we should only put them on the work-in-progress queue, not the current one.

// we should probably never restart.

// we shouldn't set this.

// we want to report this error outside of the normal stack as a last resort.

// we were an insertion and now need to pop up reenter hydration of our

// we will add them all to the child before it gets rendered. That means

// we'd have a different number of entries on the stack depending on

// we'll have to schedule a deletion. To do that, this node needs a dummy

// we're bailing out early *without* evaluating the component, we need

// webpackBootstrap

// well as nesting subscriptions of descendant components, so that we can ensure the

// when DevTools forces us to display a fallback; we skip the first render

// when considering updates across different priority levels, but isn't

// when literal brackets are explicitly disabled

// when literal brackets are explicitly enabled

// when multiple updates have the same source, and we only want to respond to

// when the user is inputting text

// when the user specifies nothing, try to match both

// when they should be reading from current and writing to workInProgress.

// when we call document.createEvent(). However this can cause confusing

// where the parsing rules cause implicit opens or closes to be added.

// where we should count the work of multiple passes.

// whether getRootHostContext() throws somewhere in renderer code or not.

// whether mapToProps needs to be invoked when props have changed.

// which branch we're currently rendering. Ideally we would model this using

// which cannot be detected. Assuming that it is a US keyboard layout

// which child belongs to which set.

// which is probably not what we want.

// which may cause missed updates; we also must ensure the store subscription

// which ones gets to ping. In theory we could get clever and keep

// will be cased anyway with server rendering.

// will commit it even if something suspended.

// will populate textContent as well.

// will receive the previous state. This effectively populates

// will sometimes influence the value of checked (even after detachment).

// will still be current since we haven't rendered them yet. The mounted

// will throw again, if neither props nor store state

// window.event assignment in both IE <= 10 as they throw an error

// with current event handlers.

// with findDOMNode and how it requires the sibling field to carry out

// with the currentUpdateLanePriority above. As an example of how this

// with the normal suspend path.

// with the previous one.

// without calling the reducer again.

// without having to recalculate it. We will also use it in commitWork() to

// without immediately flushing it. We only do this for user-initiated

// won't dispatch.

// won't update its child set by applying minimal side-effects. Instead,

// work directly on newComer if its not an object

// work is current during componentDidMount/Update.

// work triggered during the render phase will be associated with it.

// work without treating it as a typical update that originates from an event;

// work-in-progress hook.

// worth fixing.

// worth it because we expect very few discrete events to queue up and once

// wrapper function to constrain it.

// yet. If it is, then it will have a pending insertion effect on it.

// you've misconfigured your bundler to force strict mode and applied a

// }

// ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.

//# sourceMappingURL=styled-components.esm.js.map

//# sourceMappingURL=stylis.min.js.map

//json2読み込み
